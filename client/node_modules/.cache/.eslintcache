[{"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/index.tsx":"1","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/App.tsx":"2","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/input/Input.tsx":"3","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Htag/HTag.tsx":"4","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Input/Input.tsx":"5","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Button/Button.tsx":"6","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/RouterComponent.tsx":"7","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/MainPage/MainPage.tsx":"8","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/AuthPage/AuthPage.tsx":"9","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/PTag/PTag.tsx":"10","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/AuthPage/modules/AuthForm/AuthForm.tsx":"11","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/Layout/Layout.tsx":"12","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/Layout/Footer/Footer.tsx":"13","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/Layout/Navbar/Navbar.tsx":"14","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/store.ts":"15","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/selectorTypedHook.ts":"16","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/AuthPage/modules/services/userAPI.ts":"17","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/AuthPage/modules/services/http.user.ts":"18","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Spinner/Spinner.tsx":"19","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/userSlice.ts":"20","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/postsSlice.ts":"21","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/PostsPage.tsx":"22","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/modules/components/Posts/Posts.tsx":"23","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/modules/services/http.posts.ts":"24","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/modules/components/PostCreate/PostCreate.tsx":"25","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Textarea/Textarea.tsx":"26","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostPage/PostPage.tsx":"27","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostPage/modules/components/Post/Post.tsx":"28","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostPage/modules/services/postAPI.ts":"29","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Error/ErrorBoundary.tsx":"30","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/WarningAuth/WarningAuth.tsx":"31","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/TodosPage.tsx":"32","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/components/Todos/Todos.tsx":"33","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/todosSlice.ts":"34","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/services/todosAPI.ts":"35","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/components/ProjectCreate/ProjectCreate.tsx":"36","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/components/TaskCreate/TaskCreate.tsx":"37","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/MainPage/modules/components/Welcome.tsx":"38","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/HabitsPage.tsx":"39","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/components/Habits/Habits.tsx":"40"},{"size":331,"mtime":1677163892481,"results":"41","hashOfConfig":"42"},{"size":201,"mtime":1675869847254,"results":"43","hashOfConfig":"42"},{"size":260,"mtime":1675430408531,"results":"44","hashOfConfig":"42"},{"size":604,"mtime":1675731848278,"results":"45","hashOfConfig":"42"},{"size":243,"mtime":1675615554696,"results":"46","hashOfConfig":"42"},{"size":540,"mtime":1677357343637,"results":"47","hashOfConfig":"42"},{"size":869,"mtime":1677612873801,"results":"48","hashOfConfig":"42"},{"size":223,"mtime":1677493757550,"results":"49","hashOfConfig":"42"},{"size":250,"mtime":1675944613277,"results":"50","hashOfConfig":"42"},{"size":630,"mtime":1677356938128,"results":"51","hashOfConfig":"42"},{"size":3277,"mtime":1675958596123,"results":"52","hashOfConfig":"42"},{"size":1807,"mtime":1675965456054,"results":"53","hashOfConfig":"42"},{"size":742,"mtime":1676234243765,"results":"54","hashOfConfig":"42"},{"size":3835,"mtime":1677613447269,"results":"55","hashOfConfig":"42"},{"size":687,"mtime":1676481141050,"results":"56","hashOfConfig":"42"},{"size":180,"mtime":1676194816766,"results":"57","hashOfConfig":"42"},{"size":711,"mtime":1675965331381,"results":"58","hashOfConfig":"42"},{"size":408,"mtime":1675964940943,"results":"59","hashOfConfig":"42"},{"size":292,"mtime":1675943158638,"results":"60","hashOfConfig":"42"},{"size":908,"mtime":1676194779234,"results":"61","hashOfConfig":"42"},{"size":2455,"mtime":1676297749477,"results":"62","hashOfConfig":"42"},{"size":512,"mtime":1676470054481,"results":"63","hashOfConfig":"42"},{"size":2754,"mtime":1676234107809,"results":"64","hashOfConfig":"42"},{"size":779,"mtime":1676201451512,"results":"65","hashOfConfig":"42"},{"size":2128,"mtime":1676297796591,"results":"66","hashOfConfig":"42"},{"size":267,"mtime":1675959646815,"results":"67","hashOfConfig":"42"},{"size":294,"mtime":1676296308243,"results":"68","hashOfConfig":"42"},{"size":2798,"mtime":1676297830062,"results":"69","hashOfConfig":"42"},{"size":917,"mtime":1676297360250,"results":"70","hashOfConfig":"42"},{"size":987,"mtime":1676201915983,"results":"71","hashOfConfig":"42"},{"size":290,"mtime":1676233095692,"results":"72","hashOfConfig":"42"},{"size":465,"mtime":1676478066745,"results":"73","hashOfConfig":"42"},{"size":10914,"mtime":1677439238804,"results":"74","hashOfConfig":"42"},{"size":5062,"mtime":1677354901387,"results":"75","hashOfConfig":"42"},{"size":3807,"mtime":1677269626163,"results":"76","hashOfConfig":"42"},{"size":2301,"mtime":1677270129463,"results":"77","hashOfConfig":"42"},{"size":2298,"mtime":1677269343864,"results":"78","hashOfConfig":"42"},{"size":3908,"mtime":1677531680745,"results":"79","hashOfConfig":"42"},{"size":258,"mtime":1677614453169,"results":"80","hashOfConfig":"42"},{"size":1802,"mtime":1677618397166,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"1wekwf3",{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"85"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"85"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"85"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"85"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"85"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"85"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"85"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"85"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"85"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/index.tsx",[],[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/App.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/input/Input.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Htag/HTag.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Input/Input.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Button/Button.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/RouterComponent.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/MainPage/MainPage.tsx",["212"],[],"import HTag from \"../../ui/Htag/HTag\";\nimport Welcome from \"./modules/components/Welcome\";\n\nconst MainPage: React.FC = () => {\n\n    return (\n        <>\n            <Welcome />\n        </>\n    );\n};\n\nexport default MainPage;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/AuthPage/AuthPage.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/PTag/PTag.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/AuthPage/modules/AuthForm/AuthForm.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/Layout/Layout.tsx",["213"],[],"import { FunctionComponent, useEffect, useState } from \"react\";\nimport styles from './Layout.module.css';\nimport { ILayout } from \"./Layout.interface\";\nimport Footer from \"./Footer/Footer\";\nimport Navbar from \"./Navbar/Navbar\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../store/store\";\nimport { check } from \"../AuthPage/modules/services/userAPI\";\nimport { fetchedUser, fetchingUser, fetchUser } from \"../../store/userSlice\";\nimport Spinner from \"../../ui/Spinner/Spinner\";\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nconst Layout = ({children}: ILayout):JSX.Element => {\n\n    const [loading, setLoading] = useState(true);\n\n    const dispatch = useDispatch<AppDispatch>();\n\n    useEffect(() => {\n        check()\n            .then((data) => {\n                dispatch(fetchingUser());\n                dispatch(fetchUser({user: data, auth: true}));\n            })\n            .catch(() => {\n                dispatch(fetchedUser());\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n    }, [])\n\n    if(loading) {\n        return <>\n            <Spinner/>\n        </>\n    }\n\n    return (\n        <Router>\n            <div className={styles.wrapper}>\n                <Navbar />\n                <main \n                    role='main'\n                    className={styles.body}\n\n                >\n                    {children}\n                </main>\n                <Footer className={styles.footer}/>\n            </div>\n        </Router>\n \n    )\n}\n\nexport const withLayout = <T extends Record<string, unknown>>(Component: FunctionComponent<T>) => {\n\treturn function withLayoutComponent(props: T): JSX.Element {\n\t\treturn (\n            <Layout>\n                <Component {...props} />\n            </Layout>\n\t\t);\n\t};\n};","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/Layout/Footer/Footer.tsx",["214","215","216"],[],"import { IFooter } from './Footer.props';\nimport cn from 'classnames';\nimport styles from './Footer.module.css';\nimport format from 'date-fns/format';\n\nconst Footer = ({className, ...props}: IFooter):JSX.Element => {\n    return (\n        <footer className={cn(className, styles.footer)} {...props} role='footer'>\n            <div className={styles.law}>\n                MyWeb © 2022 - {format(new Date(), 'yyyy')} Все права защищены\n            </div>\n            <a href='#'>\n                Пользовательское соглашение\n            </a>\n            <a href='#'>\n                Политика конфиденциальности\n            </a>\n        </footer>\n    )\n}\n\nexport default Footer;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/Layout/Navbar/Navbar.tsx",["217","218"],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/store.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/selectorTypedHook.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/AuthPage/modules/services/userAPI.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/AuthPage/modules/services/http.user.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Spinner/Spinner.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/userSlice.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/postsSlice.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/PostsPage.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/modules/components/Posts/Posts.tsx",["219"],[],"import { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useTypedSelector } from \"../../../../../store/selectorTypedHook\";\nimport { fetchPosts } from \"../../../../../store/postsSlice\";\nimport { AppDispatch } from \"../../../../../store/store\";\nimport HTag from \"../../../../../ui/Htag/HTag\";\nimport PTag from \"../../../../../ui/PTag/PTag\";\nimport styles from \"./Posts.module.css\";\nimport Spinner from \"../../../../../ui/Spinner/Spinner\";\nimport PostCreate from \"../PostCreate/PostCreate\";\nimport Button from \"../../../../../ui/Button/Button\";\nimport { NavLink } from \"react-router-dom\";\nimport { ErrorMessage } from \"../../../../../ui/Error/ErrorBoundary\";\nimport WarningAuth from \"../../../../../ui/WarningAuth/WarningAuth\";\n\nconst Posts: React.FC = ():JSX.Element => {\n\n    const [open, setOpen] = useState<boolean>(false);\n    \n    const postLoading = useTypedSelector(state => state.posts.postsLoadingStatus);\n    const userId = useTypedSelector(state => state.user.user?.id);\n\n    const dispatch = useDispatch<AppDispatch>();\n    \n    useEffect(() => {\n        if(typeof userId != \"undefined\" ) {\n            dispatch(fetchPosts(userId));\n        }\n    }, [])\n    \n\n    if(postLoading === 'pending') {\n        return <>\n            <Spinner/>\n        </>\n    } \n\n    if(postLoading === 'failed') {\n        return <ErrorMessage />\n    }\n    \n    if(!userId) {\n        return <WarningAuth />\n    }\n\n    return (\n        <div className={styles.posts}>\n            {open ? <PostCreate setOpen={setOpen}/> : null}\n            \n                <div className={styles.add}>\n                    <PTag size=\"18\" className={styles.add_text}>\n                        Do you want to share your thoughts?\n                    </PTag>\n                    <Button onClick={() => setOpen(true)}>Add article</Button>\n                </div>\n\n                <PostsGenaration/>\n        </div>\n    );\n};\n\nconst PostsGenaration = (): JSX.Element => {\n\n    const posts = useTypedSelector(state => state.posts.posts);\n    \n    return (\n        <>\n            {posts && [...posts].sort((a, b) => a.date < b.date ? 1 : -1).map((post) => {\n                return (\n                    <NavLink className={styles.post} key={post.date} to={'/posts/' + post.id}>\n                        <div>\n                            <HTag className={styles.heading} htag=\"h2\">{post.name}</HTag>\n                            <PTag className={styles.description} size=\"16\">{post.description}</PTag>\n                            <PTag className={styles.date} size=\"14\">{new Date(post.date).toLocaleDateString()}</PTag>\n                        </div>\n                    </NavLink>\n                )\n            })}\n        </>\n    )\n}\n\nexport default Posts;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/modules/services/http.posts.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/modules/components/PostCreate/PostCreate.tsx",["220"],[],"import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addPost, fetchPosts } from '../../../../../store/postsSlice';\nimport { useTypedSelector } from '../../../../../store/selectorTypedHook';\nimport { AppDispatch } from '../../../../../store/store';\nimport Button from '../../../../../ui/Button/Button';\nimport Input from '../../../../../ui/Input/Input';\nimport Textarea from '../../../../../ui/Textarea/Textarea';\nimport { IPostCreate } from '../../interfaces/PostCreate.interface';\nimport { createPost } from '../../services/http.posts';\nimport styles from './PostCreate.module.css';\n\n\nconst PostCreate = ({setOpen, ...props}: IPostCreate): JSX.Element => {\n\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n    const userId = useTypedSelector(state => state.user.user?.id);\n    \n    const dispatch = useDispatch<AppDispatch>();\n\n    const onCreatePost = async () => {\n        const date = new Date().toString();\n        try {\n            if(typeof userId !== \"undefined\" && name.length > 1 && description.length > 1) {\n                const data = await createPost({name, description, date, userId});\n                if(typeof data !== 'undefined' && typeof data !== 'string') {\n                    dispatch(addPost({id: data.id ,name, description, date, userId}));\n                }\n                \n            }\n        } catch (error) {\n            \n        }\n        setOpen(false);\n    }\n\n    return (\n        <div className={styles.wrapper}>\n            <div className={styles.create}>\n                <Input value={name} onChange={(e) => setName(e.target.value)} placeholder='Type name'/> \n                <Textarea value={description} onChange={(e) => setDescription(e.target.value)} placeholder='Type description'/>  \n                <div className={styles.buttons}>\n                    <Button onClick={onCreatePost}>Create article</Button>\n                    <Button type='warning' onClick={() => setOpen(false)}>Cancel</Button>\n                </div> \n            </div>\n        </div>\n       \n    );\n};\n\nexport default PostCreate;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Textarea/Textarea.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostPage/PostPage.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostPage/modules/components/Post/Post.tsx",["221"],[],"import { useEffect } from 'react';\nimport HTag from '../../../../../ui/Htag/HTag';\nimport PTag from '../../../../../ui/PTag/PTag';\nimport styles from './Post.module.css';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { deletePost, fetchPost } from '../../../../../store/postsSlice';\nimport { useTypedSelector } from '../../../../../store/selectorTypedHook';\nimport { useDispatch } from 'react-redux';\nimport { AppDispatch } from '../../../../../store/store';\nimport Spinner from '../../../../../ui/Spinner/Spinner';\nimport { ErrorMessage } from '../../../../../ui/Error/ErrorBoundary';\nimport Button from '../../../../../ui/Button/Button';\nimport { NavLink } from 'react-router-dom';\nimport { deleteOnePost } from '../../services/postAPI';\n\nconst Post = () => {\n\n    const navigate = useNavigate();\n    const post = useTypedSelector(state => state.posts.post);\n    const loading = useTypedSelector(state => state.posts.postsLoadingStatus);\n    const userId = useTypedSelector(state => state.user.user?.id);\n\n    const { postId } = useParams();\n    const dispatch = useDispatch<AppDispatch>();\n    \n    useEffect(() => {\n        if(typeof userId !== 'undefined' && typeof postId !== 'undefined') {\n            try {\n                dispatch(fetchPost(postId));\n            } catch (error) {\n                console.log(error);\n            }\n        }\n    }, [])    \n        \n    const deleteArticle = async () => {\n        if(typeof postId !== 'undefined') {\n            await deleteOnePost(postId)\n                .then(() => {\n                    dispatch(deletePost(postId));\n                    navigate('/posts');\n                })\n        }\n    \n    } \n\n    if(loading === 'pending') {\n        return <Spinner />\n    }\n\n    if (loading === 'failed') {\n        return <ErrorMessage />\n    }\n    \n    return (\n        <>\n            {\n                post ? \n                <div className={styles.block}>\n                    <div className={styles.post}>\n                        <HTag className={styles.heading} htag=\"h2\">{post.name}</HTag>\n                        <PTag className={styles.description} size=\"16\">{post.description}</PTag>\n                        <PTag className={styles.date} size=\"14\">{new Date(post.date).toLocaleDateString()}</PTag>\n                    </div>\n                    <div className={styles.buttons}>\n                        <Button onClick={() => deleteArticle()} className={styles.button} type='danger'>Delete</Button>\n                        <NavLink to={'/posts'}>\n                            <Button className={styles.button} type='warning'>Back</Button>\n                        </NavLink>\n                    </div>\n\n                </div>\n                :\n                null\n            }\n        </>\n    );\n};\n\nexport default Post;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostPage/modules/services/postAPI.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Error/ErrorBoundary.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/WarningAuth/WarningAuth.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/TodosPage.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/components/Todos/Todos.tsx",["222","223","224"],[],"import { useEffect, useRef, createRef, useState, FC } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTypedSelector } from '../../../../../store/selectorTypedHook';\nimport { AppDispatch } from '../../../../../store/store';\nimport { addCategory, deleteCategory, deleteProject, deleteTask, fetchCategories, fetchCategoryProjects, fetchProjectTasks, setCurrentCategory, setCurrentProject } from '../../../../../store/todosSlice';\nimport Button from '../../../../../ui/Button/Button';\nimport { ErrorMessage } from '../../../../../ui/Error/ErrorBoundary';\nimport Input from '../../../../../ui/Input/Input';\nimport PTag from '../../../../../ui/PTag/PTag';\nimport Spinner from '../../../../../ui/Spinner/Spinner';\nimport WarningAuth from '../../../../../ui/WarningAuth/WarningAuth';\nimport cn from 'classnames';\nimport { createNewCategory, deleteCategoryProject, deleteOneCategory, deleteProjectTask } from '../../services/todosAPI';\nimport styles from './Todos.module.css';\nimport './Fade.css';\nimport HTag from '../../../../../ui/Htag/HTag';\nimport ProjectCreate from '../ProjectCreate/ProjectCreate';\nimport { IProject } from '../../interfaces/Project.interface';\nimport TaskCreate from '../TaskCreate/TaskCreate';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { IOneTodo } from '../../interfaces/OneTodo.interface';\n\n\nconst Todos:FC = ():JSX.Element => {\n\n    const [category, setCategory] = useState<string>('');\n\n    const userId = useTypedSelector(state => state.user.user?.id);\n    const loading = useTypedSelector(state => state.todos.todosLoadingStatus);\n    \n    const dispatch = useDispatch<AppDispatch>();\n\n    useEffect(() => {\n        if ( typeof userId !== 'undefined') {\n            dispatch(fetchCategories(userId));\n        }\n    }, []);\n\n    const addNewCategory = async () => {\n        try {\n            if(typeof userId !== 'undefined') {\n                await createNewCategory({name: category, status: 'progress', userId})\n                    .then(data => {\n                        dispatch(addCategory(data));\n                    })\n            }\n        } catch (error) {\n            console.log(error);\n        } finally {\n            setCategory('');\n        }\n    }\n\n    if(loading === 'pending') {\n        return <>\n            <Spinner/>\n        </>\n    } \n\n    if(loading === 'failed') {\n        return <ErrorMessage />\n    }\n    \n    if(!userId) {\n        return <WarningAuth />\n    }\n    \n    return (\n    <div className={styles.todos}>  \n        <div className={styles.category}>\n            <PTag size='18'>Categories</PTag>\n            <TodosGeneration />\n            <Input placeholder='Set category' value={category} onChange={(e) => setCategory(e.target.value)}/>\n            <Button onClick={addNewCategory} className={styles.button}>\n                Add category\n            </Button>\n        </div>\n        <ProjectGeneration />\n    </div>\n    );\n}; \n\nconst TodosGeneration:FC = (): JSX.Element => {\n\n    const categories = useTypedSelector(state => state.todos.categories);\n    const currentCategory = useTypedSelector(state => state.todos.currentCategory);\n    \n    return (\n        <>  \n            <TransitionGroup component={null} className={styles.items}>\n                {categories?.map(category => {\n                    return (\n                        <CSSTransition \n                            key={category.id} \n                            timeout={300} \n                            classNames='category'\n                        >\n                            <OneTodo category={category} currentCategory={currentCategory}/>\n                        </CSSTransition>\n                    )\n                })}\n            </TransitionGroup>\n        </>\n    )\n}\n\nconst OneTodo:FC<IOneTodo> = ({category, currentCategory}):JSX.Element => {\n\n    const dispatch = useDispatch<AppDispatch>();\n\n    const deleteCurrentCategory = async () => {\n        \n        await deleteOneCategory(currentCategory)\n            .then(() => {\n                dispatch(deleteCategory(currentCategory));\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n    }\n    \n    return (\n        <div className={cn({\n            [styles.oneCategory]: currentCategory === category.id\n        })}>\n            <Button \n                onClick={() => {\n                    dispatch(setCurrentCategory(category.id));\n                    dispatch(setCurrentProject(undefined))\n                }} \n                className={cn(styles.categoryButton, {\n                    [styles.activeButton]: currentCategory === category.id\n                })} \n                key={category.id}\n            >\n                {category.name}\n            </Button>\n            {currentCategory === category.id \n                ? \n                <Button onClick={deleteCurrentCategory} className={styles.deleteCategory} type='danger'>\n                    Delete category   \n                </Button>                         \n                :\n            null\n            }\n        </div>\n    )\n}\n\nconst ProjectGeneration:FC = ():JSX.Element => {\n    \n    const [open, setOpen] = useState(false);\n\n    const dispatch = useDispatch<AppDispatch>();\n\n    const currentCategory = useTypedSelector(state => state.todos.currentCategory);\n    const loading = useTypedSelector(state => state.todos.curentCategoryLoadingStatus);   \n    const currentCategoryProjects = useTypedSelector(state => state.todos.curentCategoryProjects);\n\n    const currentProject = useTypedSelector(state => state.todos.currentProject)\n\n    useEffect(() => {\n        dispatch(fetchCategoryProjects(currentCategory))\n    }, [currentCategory, dispatch])\n\n    const openProject = async (project: IProject) => {\n        dispatch(setCurrentProject(project));\n    }\n\n    const deleteOneProject = async (event: React.MouseEvent<HTMLDivElement, MouseEvent>, id: string) => {\n        event.stopPropagation();\n        await deleteCategoryProject(id)\n            .then(() => {\n                dispatch(deleteProject(id));\n            })\n    }\n    \n    return (\n        <div className={styles.projectsWrapper}>\n            {open ? <ProjectCreate setOpen={setOpen}/> : null}\n            <PTag size='18'>Projects</PTag>\n            {currentCategory \n                ? \n                <>\n                    <Button onClick={() => setOpen(true)}>\n                        Add project\n                    </Button>\n                </>\n                :\n            null}\n            {currentProject ? <TasksGeneration/> : null}\n            {currentCategory \n                ?\n            <div className={styles.projects}>\n                <TransitionGroup component={null} className={styles.items}>\n                    {typeof currentCategoryProjects !== 'undefined'\n                        ? \n                        currentCategoryProjects?.map(el => {\n                            return (\n                                <CSSTransition                             \n                                    key={el.id} \n                                    timeout={300} \n                                    classNames='item'\n                                >\n                                    <article \n                                        onClick={() => openProject(el)} \n                                        className={cn(styles.project, {\n                                            [styles.activeProject]: el.id === currentProject?.id\n                                        })}\n\n                                    >\n                                        <HTag htag='h2'>{el.name}</HTag>\n                                        <PTag size='18'>{el.description}</PTag>\n                                        <PTag size='14'>Status: {el.status}</PTag>\n                                        <div onClick={(event) => deleteOneProject(event, el.id || '')} className={styles.x}></div>\n                                    </article>\n                                </CSSTransition>\n                            )\n                        }) \n                        : \n                        <div>empty</div>\n                    }\n                </TransitionGroup> \n            </div> \n                :\n            null\n            }\n            {loading === 'pending' \n                ? \n                <>\n                    <HTag className={styles.choose} htag='h2'>Choose category</HTag>\n                    <Spinner />\n                </> \n                : \n            null}\n            {loading === 'failed' ? <ErrorMessage /> : null}\n        </div>\n    )\n}\n\n\nconst TasksGeneration:FC = ():JSX.Element => {\n\n    const [open, setOpen] = useState<boolean>(false);\n    \n    const dispatch = useDispatch<AppDispatch>();\n\n    const tasks = useTypedSelector(state => state.todos.currentProjectTasks);\n    const currentProject = useTypedSelector(state => state.todos.currentProject);\n\n    useEffect(() => {\n        dispatch(fetchProjectTasks(currentProject?.id || ''));\n    }, [dispatch, currentProject])\n    \n    const deleteCurrentProjectTask = async (id: string) => {\n        try {\n            await deleteProjectTask(id)\n                .then(() => {\n                    dispatch(deleteTask(id));  \n                })\n            \n        } catch (error) {\n            \n        }\n    }\n\n    return (\n        <div className={styles.tasks}>\n            {open ? <TaskCreate setOpen={setOpen}/> : null}\n            <Button onClick={() => setOpen(true)} className={styles.taskButton}>\n                Add Task\n            </Button>\n            <TransitionGroup component={null} className={styles.items}>\n                {tasks && tasks.map(task => {\n                    return (\n                        <CSSTransition \n                            key={task.id} \n                            timeout={300} \n                            classNames='item'\n                        >\n                            <div className={styles.task}>\n                                <HTag htag='h3'>\n                                    {task.name}\n                                </HTag>\n                                <PTag size='18'>\n                                    {task.description}\n                                </PTag>\n                                <PTag size='14'>\n                                    {task.status}\n                                </PTag>\n                                <div \n                                    onClick={() => {\n                                        deleteCurrentProjectTask(task.id || '')\n                                    }} \n                                    className={styles.x}\n                                ></div>\n                            </div>\n                        </CSSTransition>\n                    )\n                })}\n            </TransitionGroup>\n        </div>\n    )\n}\n\nexport default Todos;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/todosSlice.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/services/todosAPI.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/components/ProjectCreate/ProjectCreate.tsx",["225"],[],"\nimport { create } from 'domain';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTypedSelector } from '../../../../../store/selectorTypedHook';\nimport { AppDispatch } from '../../../../../store/store';\nimport { addProject } from '../../../../../store/todosSlice';\nimport Button from '../../../../../ui/Button/Button';\nimport Input from '../../../../../ui/Input/Input';\nimport Textarea from '../../../../../ui/Textarea/Textarea';\nimport { IProjectCreate } from '../../interfaces/ProjectCreate.interface';\nimport { createCategoryProject } from '../../services/todosAPI';\nimport styles from './ProjectCreate.module.css';\n\n\nconst ProjectCreate = ({setOpen, ...props}: IProjectCreate): JSX.Element => {\n\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const userId = useTypedSelector(state => state.user.user?.id);\n    const categoryId = useTypedSelector(state => state.todos.currentCategory);\n    \n    const dispatch = useDispatch<AppDispatch>();\n\n    const onCreatePost = async () => {\n        \n        try {\n            if(typeof userId !== \"undefined\" && name.length > 1 && description.length > 1) {\n\n                const data = await createCategoryProject({name, description, categoryId, userId, status: 'progress'});\n                \n                if(typeof data !== 'undefined' && typeof data !== 'string') {\n                    dispatch(addProject({id: data.id, name, description, status: 'progress', categoryId, userId}));\n                }\n            }\n        } catch (error) {\n            \n        }\n        \n        setOpen(false);\n    }\n\n    return (\n        <div className={styles.wrapper}>\n            <div className={styles.create}>\n                <Input value={name} onChange={(e) => setName(e.target.value)} placeholder='Type name'/> \n                <Textarea value={description} onChange={(e) => setDescription(e.target.value)} placeholder='Type description'/>  \n                <div className={styles.buttons}>\n                    <Button onClick={onCreatePost}>Create project</Button>\n                    <Button type='warning' onClick={() => setOpen(false)}>Cancel</Button>\n                </div> \n            </div>\n        </div>\n       \n    );\n};\n\nexport default ProjectCreate;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/components/TaskCreate/TaskCreate.tsx",["226"],[],"import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTypedSelector } from '../../../../../store/selectorTypedHook';\nimport { AppDispatch } from '../../../../../store/store';\nimport { addProject, addTask } from '../../../../../store/todosSlice';\nimport Button from '../../../../../ui/Button/Button';\nimport Input from '../../../../../ui/Input/Input';\nimport Textarea from '../../../../../ui/Textarea/Textarea';\nimport { ITaskCreate } from '../../interfaces/TaskCreate.interface';\nimport { createProjectTask } from '../../services/todosAPI';\nimport styles from './TaskCreate.module.css';\n\n\nconst TaskCreate = ({setOpen, ...props}: ITaskCreate): JSX.Element => {\n\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const currentProject = useTypedSelector(state => state.todos.currentProject);\n    const currentCategory = useTypedSelector(state => state.todos.currentCategory);\n\n    const dispatch = useDispatch<AppDispatch>();\n\n    const onCreateTask = async () => {\n    \n        try {\n            if (typeof currentProject?.id !== 'undefined') {\n                const data = await createProjectTask({name, description, projectId: currentProject?.id , status: 'progress', categoryId: currentCategory});                \n\n                if(typeof data !== 'undefined' && typeof data !== 'string') {\n                    dispatch(addTask({id: data.id, name, description, status: data.status, projectId: currentProject.id, categoryId: currentCategory }));\n                }\n            }\n\n\n        } catch (error) {\n            \n        }\n        setOpen(false);\n    }\n\n    return (\n        <div className={styles.wrapper}>\n            <div className={styles.create}>\n                <Input value={name} onChange={(e) => setName(e.target.value)} placeholder='Type name'/> \n                <Textarea value={description} onChange={(e) => setDescription(e.target.value)} placeholder='Type description'/>  \n                <div className={styles.buttons}>\n                    <Button onClick={onCreateTask}>Create task</Button>\n                    <Button type='warning' onClick={() => setOpen(false)}>Cancel</Button>\n                </div> \n            </div>\n        </div>\n       \n    );\n};\n\nexport default TaskCreate;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/MainPage/modules/components/Welcome.tsx",["227","228","229","230"],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/HabitsPage.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/components/Habits/Habits.tsx",["231","232"],[],{"ruleId":"233","severity":1,"message":"234","line":1,"column":8,"nodeType":"235","messageId":"236","endLine":1,"endColumn":12},{"ruleId":"237","severity":1,"message":"238","line":31,"column":8,"nodeType":"239","endLine":31,"endColumn":10,"suggestions":"240"},{"ruleId":"241","severity":1,"message":"242","line":8,"column":69,"nodeType":"243","endLine":8,"endColumn":82},{"ruleId":"244","severity":1,"message":"245","line":12,"column":13,"nodeType":"246","endLine":12,"endColumn":25},{"ruleId":"244","severity":1,"message":"245","line":15,"column":13,"nodeType":"246","endLine":15,"endColumn":25},{"ruleId":"233","severity":1,"message":"247","line":5,"column":36,"nodeType":"235","messageId":"236","endLine":5,"endColumn":45},{"ruleId":"244","severity":1,"message":"245","line":79,"column":25,"nodeType":"246","endLine":79,"endColumn":37},{"ruleId":"237","severity":1,"message":"248","line":29,"column":8,"nodeType":"239","endLine":29,"endColumn":10,"suggestions":"249"},{"ruleId":"233","severity":1,"message":"250","line":3,"column":19,"nodeType":"235","messageId":"236","endLine":3,"endColumn":29},{"ruleId":"237","severity":1,"message":"251","line":34,"column":8,"nodeType":"239","endLine":34,"endColumn":10,"suggestions":"252"},{"ruleId":"233","severity":1,"message":"253","line":1,"column":21,"nodeType":"235","messageId":"236","endLine":1,"endColumn":27},{"ruleId":"233","severity":1,"message":"254","line":1,"column":29,"nodeType":"235","messageId":"236","endLine":1,"endColumn":38},{"ruleId":"237","severity":1,"message":"248","line":37,"column":8,"nodeType":"239","endLine":37,"endColumn":10,"suggestions":"255"},{"ruleId":"233","severity":1,"message":"256","line":2,"column":10,"nodeType":"235","messageId":"236","endLine":2,"endColumn":16},{"ruleId":"233","severity":1,"message":"257","line":5,"column":10,"nodeType":"235","messageId":"236","endLine":5,"endColumn":20},{"ruleId":"233","severity":1,"message":"258","line":1,"column":29,"nodeType":"235","messageId":"236","endLine":1,"endColumn":37},{"ruleId":"233","severity":1,"message":"259","line":3,"column":10,"nodeType":"235","messageId":"236","endLine":3,"endColumn":16},{"ruleId":"233","severity":1,"message":"260","line":3,"column":18,"nodeType":"235","messageId":"236","endLine":3,"endColumn":27},{"ruleId":"233","severity":1,"message":"261","line":3,"column":29,"nodeType":"235","messageId":"236","endLine":3,"endColumn":36},{"ruleId":"233","severity":1,"message":"262","line":19,"column":12,"nodeType":"235","messageId":"236","endLine":19,"endColumn":17},{"ruleId":"233","severity":1,"message":"263","line":19,"column":19,"nodeType":"235","messageId":"236","endLine":19,"endColumn":27},"@typescript-eslint/no-unused-vars","'HTag' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["264"],"jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useParams' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'userId'. Either include them or remove the dependency array.",["265"],"'fetchPosts' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'postId', and 'userId'. Either include them or remove the dependency array.",["266"],"'useRef' is defined but never used.","'createRef' is defined but never used.",["267"],"'create' is defined but never used.","'addProject' is defined but never used.","'useState' is defined but never used.","'motion' is defined but never used.","'useScroll' is defined but never used.","'useTime' is defined but never used.","'dates' is assigned a value but never used.","'setDates' is assigned a value but never used.",{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"270","fix":"274"},"Update the dependencies array to be: [dispatch]",{"range":"275","text":"276"},"Update the dependencies array to be: [dispatch, userId]",{"range":"277","text":"278"},"Update the dependencies array to be: [dispatch, postId, userId]",{"range":"279","text":"280"},{"range":"281","text":"278"},[1081,1083],"[dispatch]",[1200,1202],"[dispatch, userId]",[1377,1379],"[dispatch, postId, userId]",[1800,1802]]