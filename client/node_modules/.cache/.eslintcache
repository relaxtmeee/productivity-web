[{"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/index.tsx":"1","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/App.tsx":"2","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/input/Input.tsx":"3","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Htag/HTag.tsx":"4","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Input/Input.tsx":"5","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Button/Button.tsx":"6","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/RouterComponent.tsx":"7","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/MainPage/MainPage.tsx":"8","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/AuthPage/AuthPage.tsx":"9","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/PTag/PTag.tsx":"10","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/AuthPage/modules/AuthForm/AuthForm.tsx":"11","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/Layout/Layout.tsx":"12","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/Layout/Footer/Footer.tsx":"13","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/Layout/Navbar/Navbar.tsx":"14","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/store.ts":"15","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/selectorTypedHook.ts":"16","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/AuthPage/modules/services/userAPI.ts":"17","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/AuthPage/modules/services/http.user.ts":"18","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Spinner/Spinner.tsx":"19","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/userSlice.ts":"20","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/postsSlice.ts":"21","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/PostsPage.tsx":"22","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/modules/components/Posts/Posts.tsx":"23","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/modules/services/http.posts.ts":"24","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/modules/components/PostCreate/PostCreate.tsx":"25","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Textarea/Textarea.tsx":"26","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostPage/PostPage.tsx":"27","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostPage/modules/components/Post/Post.tsx":"28","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostPage/modules/services/postAPI.ts":"29","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Error/ErrorBoundary.tsx":"30","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/WarningAuth/WarningAuth.tsx":"31","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/TodosPage.tsx":"32","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/components/Todos/Todos.tsx":"33","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/todosSlice.ts":"34","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/services/todosAPI.ts":"35","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/components/ProjectCreate/ProjectCreate.tsx":"36","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/components/TaskCreate/TaskCreate.tsx":"37","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/MainPage/modules/components/Welcome.tsx":"38","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/HabitsPage.tsx":"39","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/components/Habits/Habits.tsx":"40","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/services/habitAPI.ts":"41","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/habitsSlice.ts":"42"},{"size":331,"mtime":1678023735000,"results":"43","hashOfConfig":"44"},{"size":201,"mtime":1675869847254,"results":"45","hashOfConfig":"44"},{"size":260,"mtime":1675430408531,"results":"46","hashOfConfig":"44"},{"size":604,"mtime":1675731848278,"results":"47","hashOfConfig":"44"},{"size":243,"mtime":1675615554696,"results":"48","hashOfConfig":"44"},{"size":540,"mtime":1678023735009,"results":"49","hashOfConfig":"44"},{"size":869,"mtime":1678023735003,"results":"50","hashOfConfig":"44"},{"size":223,"mtime":1678023735003,"results":"51","hashOfConfig":"44"},{"size":250,"mtime":1675944613277,"results":"52","hashOfConfig":"44"},{"size":630,"mtime":1678023735009,"results":"53","hashOfConfig":"44"},{"size":3277,"mtime":1675958596123,"results":"54","hashOfConfig":"44"},{"size":1892,"mtime":1678025265790,"results":"55","hashOfConfig":"44"},{"size":742,"mtime":1676234243765,"results":"56","hashOfConfig":"44"},{"size":3835,"mtime":1678023735002,"results":"57","hashOfConfig":"44"},{"size":731,"mtime":1678023735008,"results":"58","hashOfConfig":"44"},{"size":180,"mtime":1676194816766,"results":"59","hashOfConfig":"44"},{"size":711,"mtime":1675965331381,"results":"60","hashOfConfig":"44"},{"size":408,"mtime":1675964940943,"results":"61","hashOfConfig":"44"},{"size":292,"mtime":1675943158638,"results":"62","hashOfConfig":"44"},{"size":908,"mtime":1676194779234,"results":"63","hashOfConfig":"44"},{"size":2455,"mtime":1676297749477,"results":"64","hashOfConfig":"44"},{"size":512,"mtime":1676470054481,"results":"65","hashOfConfig":"44"},{"size":2754,"mtime":1676234107809,"results":"66","hashOfConfig":"44"},{"size":779,"mtime":1676201451512,"results":"67","hashOfConfig":"44"},{"size":2128,"mtime":1676297796591,"results":"68","hashOfConfig":"44"},{"size":267,"mtime":1675959646815,"results":"69","hashOfConfig":"44"},{"size":294,"mtime":1676296308243,"results":"70","hashOfConfig":"44"},{"size":2798,"mtime":1676297830062,"results":"71","hashOfConfig":"44"},{"size":917,"mtime":1676297360250,"results":"72","hashOfConfig":"44"},{"size":987,"mtime":1676201915983,"results":"73","hashOfConfig":"44"},{"size":290,"mtime":1676233095692,"results":"74","hashOfConfig":"44"},{"size":465,"mtime":1676478066745,"results":"75","hashOfConfig":"44"},{"size":10914,"mtime":1678023735005,"results":"76","hashOfConfig":"44"},{"size":5062,"mtime":1678023735008,"results":"77","hashOfConfig":"44"},{"size":3807,"mtime":1678023735008,"results":"78","hashOfConfig":"44"},{"size":2301,"mtime":1678023735004,"results":"79","hashOfConfig":"44"},{"size":2298,"mtime":1678023735005,"results":"80","hashOfConfig":"44"},{"size":3908,"mtime":1678023735003,"results":"81","hashOfConfig":"44"},{"size":1398,"mtime":1678035743969,"results":"82","hashOfConfig":"44"},{"size":3275,"mtime":1678036154701,"results":"83","hashOfConfig":"44"},{"size":1406,"mtime":1678033501694,"results":"84","hashOfConfig":"44"},{"size":1658,"mtime":1678025265790,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"1wekwf3",{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"89"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"89"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"89"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"89"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"89"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"89"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"89"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"89"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"89"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"89"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"89"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/index.tsx",[],[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/App.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/input/Input.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Htag/HTag.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Input/Input.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Button/Button.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/RouterComponent.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/MainPage/MainPage.tsx",["224"],[],"import HTag from \"../../ui/Htag/HTag\";\nimport Welcome from \"./modules/components/Welcome\";\n\nconst MainPage: React.FC = () => {\n\n    return (\n        <>\n            <Welcome />\n        </>\n    );\n};\n\nexport default MainPage;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/AuthPage/AuthPage.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/PTag/PTag.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/AuthPage/modules/AuthForm/AuthForm.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/Layout/Layout.tsx",["225"],[],"import { FunctionComponent, useEffect, useState } from \"react\";\nimport styles from './Layout.module.css';\nimport { ILayout } from \"./Layout.interface\";\nimport Footer from \"./Footer/Footer\";\nimport Navbar from \"./Navbar/Navbar\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../store/store\";\nimport { check } from \"../AuthPage/modules/services/userAPI\";\nimport { fetchedUser, fetchingUser, fetchUser } from \"../../store/userSlice\";\nimport Spinner from \"../../ui/Spinner/Spinner\";\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nconst Layout = ({children}: ILayout):JSX.Element => {\n\n    const [loading, setLoading] = useState(true);\n\n    const dispatch = useDispatch<AppDispatch>();\n\n    useEffect(() => {\n        check()\n            .then((data) => {\n                dispatch(fetchingUser());\n                dispatch(fetchUser({user: data, auth: true}));\n            })\n            .catch(() => {\n                dispatch(fetchedUser());\n            })\n            .finally(() => {\n                setLoading(false)\n            })\n    }, [])\n\n    if(loading) {\n        return <>\n            <Spinner/>\n        </>\n    }\n\n    return (\n        <Router>\n            <div className={styles.wrapper}>\n                <Navbar />\n                <main \n                    role='main'\n                    className={styles.body}\n\n                >\n                    <div className={styles.gradient}>\n                        {children}\n                    </div>\n                </main>\n                <Footer className={styles.footer}/>\n            </div>\n        </Router>\n \n    )\n}\n\nexport const withLayout = <T extends Record<string, unknown>>(Component: FunctionComponent<T>) => {\n\treturn function withLayoutComponent(props: T): JSX.Element {\n\t\treturn (\n            <Layout>\n                <Component {...props} />\n            </Layout>\n\t\t);\n\t};\n};","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/Layout/Footer/Footer.tsx",["226","227","228"],[],"import { IFooter } from './Footer.props';\nimport cn from 'classnames';\nimport styles from './Footer.module.css';\nimport format from 'date-fns/format';\n\nconst Footer = ({className, ...props}: IFooter):JSX.Element => {\n    return (\n        <footer className={cn(className, styles.footer)} {...props} role='footer'>\n            <div className={styles.law}>\n                MyWeb © 2022 - {format(new Date(), 'yyyy')} Все права защищены\n            </div>\n            <a href='#'>\n                Пользовательское соглашение\n            </a>\n            <a href='#'>\n                Политика конфиденциальности\n            </a>\n        </footer>\n    )\n}\n\nexport default Footer;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/Layout/Navbar/Navbar.tsx",["229","230"],[],"import { INavbar } from \"./Navbar.props\";\nimport styles from \"./Navbar.module.css\";\nimport Button from \"../../../ui/Button/Button\";\nimport { useTypedSelector } from \"../../../store/selectorTypedHook\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../../store/store\";\nimport { fetchUser } from \"../../../store/userSlice\";\nimport { NavLink } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport cn from 'classnames';\nimport { setPostsNull } from \"../../../store/postsSlice\";\nimport PTag from \"../../../ui/PTag/PTag\";\n\nconst Navbar = ({className, ...props}: INavbar ):JSX.Element => {\n\n    const [openMenu, setOpenMenu] = useState<boolean>(false);\n\n    const user = useTypedSelector(state => state.user.auth);\n    const userEmail = useTypedSelector(state => state.user.user?.email);\n    const dispatch = useDispatch<AppDispatch>();\n\n    let location = useLocation();\n\n    const navigate = useNavigate();\n\n    const logIn = () => {\n        navigate('/auth');\n        setOpenMenu(!openMenu);\n    }\n\n    const logOut = () => {\n        dispatch(fetchUser({user: {}, auth: false}));\n        dispatch(setPostsNull());\n        localStorage.removeItem('token');\n        navigate('/auth');\n        setOpenMenu(!openMenu);\n    }\n    \n    return (\n        <nav className={styles.nav} {...props}>\n            <div className={cn(styles.logo, {\n                    [styles.active]: location.pathname === '/'\n                })}\n            >\n                <NavLink to={'/'}>\n                    MyWeb\n                </NavLink>\n            </div>\n            <div className={cn(styles.menu, {\n                [styles.active]: openMenu\n            })}>\n                <ul className={styles.links}>\n                    <li \n                        onClick={() => setOpenMenu(false)} \n                        className={cn(styles.link, {\n                            [styles.active]: location.pathname === '/posts'\n                        })}\n                    >\n                        <NavLink to={'/posts'}>Blog</NavLink>\n                    </li>\n                    <li \n                        onClick={() => setOpenMenu(false)} \n                        className={cn(styles.link, {\n                            [styles.active]: location.pathname === '/todos'\n                        })}\n                    >\n                        <NavLink to={'/todos'}>Todo</NavLink>\n                    </li>\n                    <li \n                        onClick={() => setOpenMenu(false)} \n                        className={cn(styles.link, {\n                            [styles.active]: location.pathname === '/habits'\n                        })}\n                    >\n                        <NavLink to={'/habits'}>Habits</NavLink>\n                    </li>\n                    <li onClick={() => setOpenMenu(false)} className={styles.link}>\n                        <a href=\"#\">Training constructor</a>\n                    </li>\n                </ul>\n                <div className={styles.user}>\n                    {user ? \n                        <>\n                            <PTag size='16' className={styles.name}>\n                                {userEmail}\n                            </PTag>\n                            <Button onClick={logOut}>\n                                Log out\n                            </Button> \n                        </>\n                        : \n                        <Button onClick={logIn}>Log in</Button>\n                    }\n                </div>\n            </div>\n            <div onClick={() => setOpenMenu(!openMenu)} className={cn(styles.menu_button, {\n                [styles.active]: openMenu\n            })}>\n            </div>\n        </nav>\n    );\n};\n\nexport default Navbar;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/store.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/selectorTypedHook.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/AuthPage/modules/services/userAPI.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/AuthPage/modules/services/http.user.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Spinner/Spinner.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/userSlice.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/postsSlice.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/PostsPage.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/modules/components/Posts/Posts.tsx",["231"],[],"import { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useTypedSelector } from \"../../../../../store/selectorTypedHook\";\nimport { fetchPosts } from \"../../../../../store/postsSlice\";\nimport { AppDispatch } from \"../../../../../store/store\";\nimport HTag from \"../../../../../ui/Htag/HTag\";\nimport PTag from \"../../../../../ui/PTag/PTag\";\nimport styles from \"./Posts.module.css\";\nimport Spinner from \"../../../../../ui/Spinner/Spinner\";\nimport PostCreate from \"../PostCreate/PostCreate\";\nimport Button from \"../../../../../ui/Button/Button\";\nimport { NavLink } from \"react-router-dom\";\nimport { ErrorMessage } from \"../../../../../ui/Error/ErrorBoundary\";\nimport WarningAuth from \"../../../../../ui/WarningAuth/WarningAuth\";\n\nconst Posts: React.FC = ():JSX.Element => {\n\n    const [open, setOpen] = useState<boolean>(false);\n    \n    const postLoading = useTypedSelector(state => state.posts.postsLoadingStatus);\n    const userId = useTypedSelector(state => state.user.user?.id);\n\n    const dispatch = useDispatch<AppDispatch>();\n    \n    useEffect(() => {\n        if(typeof userId != \"undefined\" ) {\n            dispatch(fetchPosts(userId));\n        }\n    }, [])\n    \n\n    if(postLoading === 'pending') {\n        return <>\n            <Spinner/>\n        </>\n    } \n\n    if(postLoading === 'failed') {\n        return <ErrorMessage />\n    }\n    \n    if(!userId) {\n        return <WarningAuth />\n    }\n\n    return (\n        <div className={styles.posts}>\n            {open ? <PostCreate setOpen={setOpen}/> : null}\n            \n                <div className={styles.add}>\n                    <PTag size=\"18\" className={styles.add_text}>\n                        Do you want to share your thoughts?\n                    </PTag>\n                    <Button onClick={() => setOpen(true)}>Add article</Button>\n                </div>\n\n                <PostsGenaration/>\n        </div>\n    );\n};\n\nconst PostsGenaration = (): JSX.Element => {\n\n    const posts = useTypedSelector(state => state.posts.posts);\n    \n    return (\n        <>\n            {posts && [...posts].sort((a, b) => a.date < b.date ? 1 : -1).map((post) => {\n                return (\n                    <NavLink className={styles.post} key={post.date} to={'/posts/' + post.id}>\n                        <div>\n                            <HTag className={styles.heading} htag=\"h2\">{post.name}</HTag>\n                            <PTag className={styles.description} size=\"16\">{post.description}</PTag>\n                            <PTag className={styles.date} size=\"14\">{new Date(post.date).toLocaleDateString()}</PTag>\n                        </div>\n                    </NavLink>\n                )\n            })}\n        </>\n    )\n}\n\nexport default Posts;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/modules/services/http.posts.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/modules/components/PostCreate/PostCreate.tsx",["232"],[],"import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addPost, fetchPosts } from '../../../../../store/postsSlice';\nimport { useTypedSelector } from '../../../../../store/selectorTypedHook';\nimport { AppDispatch } from '../../../../../store/store';\nimport Button from '../../../../../ui/Button/Button';\nimport Input from '../../../../../ui/Input/Input';\nimport Textarea from '../../../../../ui/Textarea/Textarea';\nimport { IPostCreate } from '../../interfaces/PostCreate.interface';\nimport { createPost } from '../../services/http.posts';\nimport styles from './PostCreate.module.css';\n\n\nconst PostCreate = ({setOpen, ...props}: IPostCreate): JSX.Element => {\n\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n    const userId = useTypedSelector(state => state.user.user?.id);\n    \n    const dispatch = useDispatch<AppDispatch>();\n\n    const onCreatePost = async () => {\n        const date = new Date().toString();\n        try {\n            if(typeof userId !== \"undefined\" && name.length > 1 && description.length > 1) {\n                const data = await createPost({name, description, date, userId});\n                if(typeof data !== 'undefined' && typeof data !== 'string') {\n                    dispatch(addPost({id: data.id ,name, description, date, userId}));\n                }\n                \n            }\n        } catch (error) {\n            \n        }\n        setOpen(false);\n    }\n\n    return (\n        <div className={styles.wrapper}>\n            <div className={styles.create}>\n                <Input value={name} onChange={(e) => setName(e.target.value)} placeholder='Type name'/> \n                <Textarea value={description} onChange={(e) => setDescription(e.target.value)} placeholder='Type description'/>  \n                <div className={styles.buttons}>\n                    <Button onClick={onCreatePost}>Create article</Button>\n                    <Button type='warning' onClick={() => setOpen(false)}>Cancel</Button>\n                </div> \n            </div>\n        </div>\n       \n    );\n};\n\nexport default PostCreate;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Textarea/Textarea.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostPage/PostPage.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostPage/modules/components/Post/Post.tsx",["233"],[],"import { useEffect } from 'react';\nimport HTag from '../../../../../ui/Htag/HTag';\nimport PTag from '../../../../../ui/PTag/PTag';\nimport styles from './Post.module.css';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { deletePost, fetchPost } from '../../../../../store/postsSlice';\nimport { useTypedSelector } from '../../../../../store/selectorTypedHook';\nimport { useDispatch } from 'react-redux';\nimport { AppDispatch } from '../../../../../store/store';\nimport Spinner from '../../../../../ui/Spinner/Spinner';\nimport { ErrorMessage } from '../../../../../ui/Error/ErrorBoundary';\nimport Button from '../../../../../ui/Button/Button';\nimport { NavLink } from 'react-router-dom';\nimport { deleteOnePost } from '../../services/postAPI';\n\nconst Post = () => {\n\n    const navigate = useNavigate();\n    const post = useTypedSelector(state => state.posts.post);\n    const loading = useTypedSelector(state => state.posts.postsLoadingStatus);\n    const userId = useTypedSelector(state => state.user.user?.id);\n\n    const { postId } = useParams();\n    const dispatch = useDispatch<AppDispatch>();\n    \n    useEffect(() => {\n        if(typeof userId !== 'undefined' && typeof postId !== 'undefined') {\n            try {\n                dispatch(fetchPost(postId));\n            } catch (error) {\n                console.log(error);\n            }\n        }\n    }, [])    \n        \n    const deleteArticle = async () => {\n        if(typeof postId !== 'undefined') {\n            await deleteOnePost(postId)\n                .then(() => {\n                    dispatch(deletePost(postId));\n                    navigate('/posts');\n                })\n        }\n    \n    } \n\n    if(loading === 'pending') {\n        return <Spinner />\n    }\n\n    if (loading === 'failed') {\n        return <ErrorMessage />\n    }\n    \n    return (\n        <>\n            {\n                post ? \n                <div className={styles.block}>\n                    <div className={styles.post}>\n                        <HTag className={styles.heading} htag=\"h2\">{post.name}</HTag>\n                        <PTag className={styles.description} size=\"16\">{post.description}</PTag>\n                        <PTag className={styles.date} size=\"14\">{new Date(post.date).toLocaleDateString()}</PTag>\n                    </div>\n                    <div className={styles.buttons}>\n                        <Button onClick={() => deleteArticle()} className={styles.button} type='danger'>Delete</Button>\n                        <NavLink to={'/posts'}>\n                            <Button className={styles.button} type='warning'>Back</Button>\n                        </NavLink>\n                    </div>\n\n                </div>\n                :\n                null\n            }\n        </>\n    );\n};\n\nexport default Post;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostPage/modules/services/postAPI.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/Error/ErrorBoundary.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/ui/WarningAuth/WarningAuth.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/TodosPage.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/components/Todos/Todos.tsx",["234","235","236"],[],"import { useEffect, useRef, createRef, useState, FC } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTypedSelector } from '../../../../../store/selectorTypedHook';\nimport { AppDispatch } from '../../../../../store/store';\nimport { addCategory, deleteCategory, deleteProject, deleteTask, fetchCategories, fetchCategoryProjects, fetchProjectTasks, setCurrentCategory, setCurrentProject } from '../../../../../store/todosSlice';\nimport Button from '../../../../../ui/Button/Button';\nimport { ErrorMessage } from '../../../../../ui/Error/ErrorBoundary';\nimport Input from '../../../../../ui/Input/Input';\nimport PTag from '../../../../../ui/PTag/PTag';\nimport Spinner from '../../../../../ui/Spinner/Spinner';\nimport WarningAuth from '../../../../../ui/WarningAuth/WarningAuth';\nimport cn from 'classnames';\nimport { createNewCategory, deleteCategoryProject, deleteOneCategory, deleteProjectTask } from '../../services/todosAPI';\nimport styles from './Todos.module.css';\nimport './Fade.css';\nimport HTag from '../../../../../ui/Htag/HTag';\nimport ProjectCreate from '../ProjectCreate/ProjectCreate';\nimport { IProject } from '../../interfaces/Project.interface';\nimport TaskCreate from '../TaskCreate/TaskCreate';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { IOneTodo } from '../../interfaces/OneTodo.interface';\n\n\nconst Todos:FC = ():JSX.Element => {\n\n    const [category, setCategory] = useState<string>('');\n\n    const userId = useTypedSelector(state => state.user.user?.id);\n    const loading = useTypedSelector(state => state.todos.todosLoadingStatus);\n    \n    const dispatch = useDispatch<AppDispatch>();\n\n    useEffect(() => {\n        if ( typeof userId !== 'undefined') {\n            dispatch(fetchCategories(userId));\n        }\n    }, []);\n\n    const addNewCategory = async () => {\n        try {\n            if(typeof userId !== 'undefined') {\n                await createNewCategory({name: category, status: 'progress', userId})\n                    .then(data => {\n                        dispatch(addCategory(data));\n                    })\n            }\n        } catch (error) {\n            console.log(error);\n        } finally {\n            setCategory('');\n        }\n    }\n\n    if(loading === 'pending') {\n        return <>\n            <Spinner/>\n        </>\n    } \n\n    if(loading === 'failed') {\n        return <ErrorMessage />\n    }\n    \n    if(!userId) {\n        return <WarningAuth />\n    }\n    \n    return (\n    <div className={styles.todos}>  \n        <div className={styles.category}>\n            <PTag size='18'>Categories</PTag>\n            <TodosGeneration />\n            <Input placeholder='Set category' value={category} onChange={(e) => setCategory(e.target.value)}/>\n            <Button onClick={addNewCategory} className={styles.button}>\n                Add category\n            </Button>\n        </div>\n        <ProjectGeneration />\n    </div>\n    );\n}; \n\nconst TodosGeneration:FC = (): JSX.Element => {\n\n    const categories = useTypedSelector(state => state.todos.categories);\n    const currentCategory = useTypedSelector(state => state.todos.currentCategory);\n    \n    return (\n        <>  \n            <TransitionGroup component={null} className={styles.items}>\n                {categories?.map(category => {\n                    return (\n                        <CSSTransition \n                            key={category.id} \n                            timeout={300} \n                            classNames='category'\n                        >\n                            <OneTodo category={category} currentCategory={currentCategory}/>\n                        </CSSTransition>\n                    )\n                })}\n            </TransitionGroup>\n        </>\n    )\n}\n\nconst OneTodo:FC<IOneTodo> = ({category, currentCategory}):JSX.Element => {\n\n    const dispatch = useDispatch<AppDispatch>();\n\n    const deleteCurrentCategory = async () => {\n        \n        await deleteOneCategory(currentCategory)\n            .then(() => {\n                dispatch(deleteCategory(currentCategory));\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n    }\n    \n    return (\n        <div className={cn({\n            [styles.oneCategory]: currentCategory === category.id\n        })}>\n            <Button \n                onClick={() => {\n                    dispatch(setCurrentCategory(category.id));\n                    dispatch(setCurrentProject(undefined))\n                }} \n                className={cn(styles.categoryButton, {\n                    [styles.activeButton]: currentCategory === category.id\n                })} \n                key={category.id}\n            >\n                {category.name}\n            </Button>\n            {currentCategory === category.id \n                ? \n                <Button onClick={deleteCurrentCategory} className={styles.deleteCategory} type='danger'>\n                    Delete category   \n                </Button>                         \n                :\n            null\n            }\n        </div>\n    )\n}\n\nconst ProjectGeneration:FC = ():JSX.Element => {\n    \n    const [open, setOpen] = useState(false);\n\n    const dispatch = useDispatch<AppDispatch>();\n\n    const currentCategory = useTypedSelector(state => state.todos.currentCategory);\n    const loading = useTypedSelector(state => state.todos.curentCategoryLoadingStatus);   \n    const currentCategoryProjects = useTypedSelector(state => state.todos.curentCategoryProjects);\n\n    const currentProject = useTypedSelector(state => state.todos.currentProject)\n\n    useEffect(() => {\n        dispatch(fetchCategoryProjects(currentCategory))\n    }, [currentCategory, dispatch])\n\n    const openProject = async (project: IProject) => {\n        dispatch(setCurrentProject(project));\n    }\n\n    const deleteOneProject = async (event: React.MouseEvent<HTMLDivElement, MouseEvent>, id: string) => {\n        event.stopPropagation();\n        await deleteCategoryProject(id)\n            .then(() => {\n                dispatch(deleteProject(id));\n            })\n    }\n    \n    return (\n        <div className={styles.projectsWrapper}>\n            {open ? <ProjectCreate setOpen={setOpen}/> : null}\n            <PTag size='18'>Projects</PTag>\n            {currentCategory \n                ? \n                <>\n                    <Button onClick={() => setOpen(true)}>\n                        Add project\n                    </Button>\n                </>\n                :\n            null}\n            {currentProject ? <TasksGeneration/> : null}\n            {currentCategory \n                ?\n            <div className={styles.projects}>\n                <TransitionGroup component={null} className={styles.items}>\n                    {typeof currentCategoryProjects !== 'undefined'\n                        ? \n                        currentCategoryProjects?.map(el => {\n                            return (\n                                <CSSTransition                             \n                                    key={el.id} \n                                    timeout={300} \n                                    classNames='item'\n                                >\n                                    <article \n                                        onClick={() => openProject(el)} \n                                        className={cn(styles.project, {\n                                            [styles.activeProject]: el.id === currentProject?.id\n                                        })}\n\n                                    >\n                                        <HTag htag='h2'>{el.name}</HTag>\n                                        <PTag size='18'>{el.description}</PTag>\n                                        <PTag size='14'>Status: {el.status}</PTag>\n                                        <div onClick={(event) => deleteOneProject(event, el.id || '')} className={styles.x}></div>\n                                    </article>\n                                </CSSTransition>\n                            )\n                        }) \n                        : \n                        <div>empty</div>\n                    }\n                </TransitionGroup> \n            </div> \n                :\n            null\n            }\n            {loading === 'pending' \n                ? \n                <>\n                    <HTag className={styles.choose} htag='h2'>Choose category</HTag>\n                    <Spinner />\n                </> \n                : \n            null}\n            {loading === 'failed' ? <ErrorMessage /> : null}\n        </div>\n    )\n}\n\n\nconst TasksGeneration:FC = ():JSX.Element => {\n\n    const [open, setOpen] = useState<boolean>(false);\n    \n    const dispatch = useDispatch<AppDispatch>();\n\n    const tasks = useTypedSelector(state => state.todos.currentProjectTasks);\n    const currentProject = useTypedSelector(state => state.todos.currentProject);\n\n    useEffect(() => {\n        dispatch(fetchProjectTasks(currentProject?.id || ''));\n    }, [dispatch, currentProject])\n    \n    const deleteCurrentProjectTask = async (id: string) => {\n        try {\n            await deleteProjectTask(id)\n                .then(() => {\n                    dispatch(deleteTask(id));  \n                })\n            \n        } catch (error) {\n            \n        }\n    }\n\n    return (\n        <div className={styles.tasks}>\n            {open ? <TaskCreate setOpen={setOpen}/> : null}\n            <Button onClick={() => setOpen(true)} className={styles.taskButton}>\n                Add Task\n            </Button>\n            <TransitionGroup component={null} className={styles.items}>\n                {tasks && tasks.map(task => {\n                    return (\n                        <CSSTransition \n                            key={task.id} \n                            timeout={300} \n                            classNames='item'\n                        >\n                            <div className={styles.task}>\n                                <HTag htag='h3'>\n                                    {task.name}\n                                </HTag>\n                                <PTag size='18'>\n                                    {task.description}\n                                </PTag>\n                                <PTag size='14'>\n                                    {task.status}\n                                </PTag>\n                                <div \n                                    onClick={() => {\n                                        deleteCurrentProjectTask(task.id || '')\n                                    }} \n                                    className={styles.x}\n                                ></div>\n                            </div>\n                        </CSSTransition>\n                    )\n                })}\n            </TransitionGroup>\n        </div>\n    )\n}\n\nexport default Todos;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/todosSlice.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/services/todosAPI.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/components/ProjectCreate/ProjectCreate.tsx",["237"],[],"\nimport { create } from 'domain';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTypedSelector } from '../../../../../store/selectorTypedHook';\nimport { AppDispatch } from '../../../../../store/store';\nimport { addProject } from '../../../../../store/todosSlice';\nimport Button from '../../../../../ui/Button/Button';\nimport Input from '../../../../../ui/Input/Input';\nimport Textarea from '../../../../../ui/Textarea/Textarea';\nimport { IProjectCreate } from '../../interfaces/ProjectCreate.interface';\nimport { createCategoryProject } from '../../services/todosAPI';\nimport styles from './ProjectCreate.module.css';\n\n\nconst ProjectCreate = ({setOpen, ...props}: IProjectCreate): JSX.Element => {\n\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const userId = useTypedSelector(state => state.user.user?.id);\n    const categoryId = useTypedSelector(state => state.todos.currentCategory);\n    \n    const dispatch = useDispatch<AppDispatch>();\n\n    const onCreatePost = async () => {\n        \n        try {\n            if(typeof userId !== \"undefined\" && name.length > 1 && description.length > 1) {\n\n                const data = await createCategoryProject({name, description, categoryId, userId, status: 'progress'});\n                \n                if(typeof data !== 'undefined' && typeof data !== 'string') {\n                    dispatch(addProject({id: data.id, name, description, status: 'progress', categoryId, userId}));\n                }\n            }\n        } catch (error) {\n            \n        }\n        \n        setOpen(false);\n    }\n\n    return (\n        <div className={styles.wrapper}>\n            <div className={styles.create}>\n                <Input value={name} onChange={(e) => setName(e.target.value)} placeholder='Type name'/> \n                <Textarea value={description} onChange={(e) => setDescription(e.target.value)} placeholder='Type description'/>  \n                <div className={styles.buttons}>\n                    <Button onClick={onCreatePost}>Create project</Button>\n                    <Button type='warning' onClick={() => setOpen(false)}>Cancel</Button>\n                </div> \n            </div>\n        </div>\n       \n    );\n};\n\nexport default ProjectCreate;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/components/TaskCreate/TaskCreate.tsx",["238"],[],"import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTypedSelector } from '../../../../../store/selectorTypedHook';\nimport { AppDispatch } from '../../../../../store/store';\nimport { addProject, addTask } from '../../../../../store/todosSlice';\nimport Button from '../../../../../ui/Button/Button';\nimport Input from '../../../../../ui/Input/Input';\nimport Textarea from '../../../../../ui/Textarea/Textarea';\nimport { ITaskCreate } from '../../interfaces/TaskCreate.interface';\nimport { createProjectTask } from '../../services/todosAPI';\nimport styles from './TaskCreate.module.css';\n\n\nconst TaskCreate = ({setOpen, ...props}: ITaskCreate): JSX.Element => {\n\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const currentProject = useTypedSelector(state => state.todos.currentProject);\n    const currentCategory = useTypedSelector(state => state.todos.currentCategory);\n\n    const dispatch = useDispatch<AppDispatch>();\n\n    const onCreateTask = async () => {\n    \n        try {\n            if (typeof currentProject?.id !== 'undefined') {\n                const data = await createProjectTask({name, description, projectId: currentProject?.id , status: 'progress', categoryId: currentCategory});                \n\n                if(typeof data !== 'undefined' && typeof data !== 'string') {\n                    dispatch(addTask({id: data.id, name, description, status: data.status, projectId: currentProject.id, categoryId: currentCategory }));\n                }\n            }\n\n\n        } catch (error) {\n            \n        }\n        setOpen(false);\n    }\n\n    return (\n        <div className={styles.wrapper}>\n            <div className={styles.create}>\n                <Input value={name} onChange={(e) => setName(e.target.value)} placeholder='Type name'/> \n                <Textarea value={description} onChange={(e) => setDescription(e.target.value)} placeholder='Type description'/>  \n                <div className={styles.buttons}>\n                    <Button onClick={onCreateTask}>Create task</Button>\n                    <Button type='warning' onClick={() => setOpen(false)}>Cancel</Button>\n                </div> \n            </div>\n        </div>\n       \n    );\n};\n\nexport default TaskCreate;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/MainPage/modules/components/Welcome.tsx",["239","240","241","242"],[],"import { useEffect, useRef, useState } from 'react';\nimport styles from './Welcome.module.css';\nimport { motion, useScroll, useTime } from \"framer-motion\";\nimport gsap from 'gsap';\nimport ScrollTrigger from 'gsap/ScrollTrigger';\nimport Button from '../../../../ui/Button/Button';\nimport { NavLink } from 'react-router-dom';\ngsap.registerPlugin(ScrollTrigger);\n\n\nconst Welcome = () => {\n\n    const block1 = useRef(null);\n    const block2 = useRef(null);\n    const block3 = useRef(null);\n\n    useEffect(() => {\n        const el1 = block1.current;\n        gsap.fromTo(el1, { top: '100%', opacity: 0}, {top: '50%', transform: 'translateY(-50%)', opacity: 1, duration: 1, scrollTrigger: {\n            trigger: el1\n        }});\n\n        const el2 = block2.current;\n        gsap.fromTo(el2, { top: '100%', opacity: 0}, {top: '50%', transform: 'translateY(-50%)', opacity: 1, duration: 1, scrollTrigger: {\n            trigger: el2\n        }});\n\n        const el3 = block3.current;\n        gsap.fromTo(el3, { top: '100%', opacity: 0}, {top: '50%', transform: 'translateY(-50%)',  opacity: 1, duration: 1, scrollTrigger: {\n            trigger: el3\n        }});\n\n    }, [])\n \n    \n    return (\n        <div className={styles.wrapper}>\n            <div className={styles.block}>\n                <div className={styles.heading}>\n                    Welcome!\n                </div>\n                <div className={styles.scroll}>\n                    <svg fill=\"none\" height=\"24\" strokeWidth=\"1.5\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 5L12.5303 4.46967C12.2374 4.17678 11.7626 4.17678 11.4697 4.46967L12 5ZM12 13L11.4697 13.5303C11.7626 13.8232 12.2374 13.8232 12.5303 13.5303L12 13ZM9.46967 6.46967C9.17678 6.76256 9.17678 7.23744 9.46967 7.53033C9.76256 7.82322 10.2374 7.82322 10.5303 7.53033L9.46967 6.46967ZM13.4697 7.53033C13.7626 7.82322 14.2374 7.82322 14.5303 7.53033C14.8232 7.23744 14.8232 6.76256 14.5303 6.46967L13.4697 7.53033ZM10.5303 10.4697C10.2374 10.1768 9.76256 10.1768 9.46967 10.4697C9.17678 10.7626 9.17678 11.2374 9.46967 11.5303L10.5303 10.4697ZM14.5303 11.5303C14.8232 11.2374 14.8232 10.7626 14.5303 10.4697C14.2374 10.1768 13.7626 10.1768 13.4697 10.4697L14.5303 11.5303ZM3.25 10V14H4.75V10H3.25ZM20.75 14V10H19.25V14H20.75ZM11.25 5V13H12.75V5H11.25ZM11.4697 4.46967L9.46967 6.46967L10.5303 7.53033L12.5303 5.53033L11.4697 4.46967ZM11.4697 5.53033L13.4697 7.53033L14.5303 6.46967L12.5303 4.46967L11.4697 5.53033ZM12.5303 12.4697L10.5303 10.4697L9.46967 11.5303L11.4697 13.5303L12.5303 12.4697ZM12.5303 13.5303L14.5303 11.5303L13.4697 10.4697L11.4697 12.4697L12.5303 13.5303ZM20.75 10C20.75 5.16751 16.8325 1.25 12 1.25V2.75C16.0041 2.75 19.25 5.99594 19.25 10H20.75ZM12 22.75C16.8325 22.75 20.75 18.8325 20.75 14H19.25C19.25 18.0041 16.0041 21.25 12 21.25V22.75ZM3.25 14C3.25 18.8325 7.16751 22.75 12 22.75V21.25C7.99594 21.25 4.75 18.0041 4.75 14H3.25ZM4.75 10C4.75 5.99594 7.99594 2.75 12 2.75V1.25C7.16751 1.25 3.25 5.16751 3.25 10H4.75Z\" fill=\"currentColor\"/></svg>\n                </div>\n            </div>\n            <div className={styles.block}>\n                <div ref={block1} className={styles.text}>\n                    You are visiting productivity website\n                </div>\n            </div>\n            <div className={styles.block}>\n                <div ref={block2} className={styles.text}>\n                    Here You can find all for upgrade your work\n                </div>\n            </div>\n            <div className={styles.block}>\n                <div ref={block3} className={styles.text}>\n                    Enjoy your use\n                </div>\n                <NavLink to={'/posts'}>\n                    <Button className={styles.button}>\n                        Перейти в блог\n                    </Button>\n                </NavLink>\n            </div>\n        </div>\n    );\n};\n\nexport default Welcome;","/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/HabitsPage.tsx",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/components/Habits/Habits.tsx",["243","244"],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/services/habitAPI.ts",[],[],"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/habitsSlice.ts",[],[],{"ruleId":"245","severity":1,"message":"246","line":1,"column":8,"nodeType":"247","messageId":"248","endLine":1,"endColumn":12},{"ruleId":"249","severity":1,"message":"250","line":31,"column":8,"nodeType":"251","endLine":31,"endColumn":10,"suggestions":"252"},{"ruleId":"253","severity":1,"message":"254","line":8,"column":69,"nodeType":"255","endLine":8,"endColumn":82},{"ruleId":"256","severity":1,"message":"257","line":12,"column":13,"nodeType":"258","endLine":12,"endColumn":25},{"ruleId":"256","severity":1,"message":"257","line":15,"column":13,"nodeType":"258","endLine":15,"endColumn":25},{"ruleId":"245","severity":1,"message":"259","line":5,"column":36,"nodeType":"247","messageId":"248","endLine":5,"endColumn":45},{"ruleId":"256","severity":1,"message":"257","line":79,"column":25,"nodeType":"258","endLine":79,"endColumn":37},{"ruleId":"249","severity":1,"message":"260","line":29,"column":8,"nodeType":"251","endLine":29,"endColumn":10,"suggestions":"261"},{"ruleId":"245","severity":1,"message":"262","line":3,"column":19,"nodeType":"247","messageId":"248","endLine":3,"endColumn":29},{"ruleId":"249","severity":1,"message":"263","line":34,"column":8,"nodeType":"251","endLine":34,"endColumn":10,"suggestions":"264"},{"ruleId":"245","severity":1,"message":"265","line":1,"column":21,"nodeType":"247","messageId":"248","endLine":1,"endColumn":27},{"ruleId":"245","severity":1,"message":"266","line":1,"column":29,"nodeType":"247","messageId":"248","endLine":1,"endColumn":38},{"ruleId":"249","severity":1,"message":"260","line":37,"column":8,"nodeType":"251","endLine":37,"endColumn":10,"suggestions":"267"},{"ruleId":"245","severity":1,"message":"268","line":2,"column":10,"nodeType":"247","messageId":"248","endLine":2,"endColumn":16},{"ruleId":"245","severity":1,"message":"269","line":5,"column":10,"nodeType":"247","messageId":"248","endLine":5,"endColumn":20},{"ruleId":"245","severity":1,"message":"270","line":1,"column":29,"nodeType":"247","messageId":"248","endLine":1,"endColumn":37},{"ruleId":"245","severity":1,"message":"271","line":3,"column":10,"nodeType":"247","messageId":"248","endLine":3,"endColumn":16},{"ruleId":"245","severity":1,"message":"272","line":3,"column":18,"nodeType":"247","messageId":"248","endLine":3,"endColumn":27},{"ruleId":"245","severity":1,"message":"273","line":3,"column":29,"nodeType":"247","messageId":"248","endLine":3,"endColumn":36},{"ruleId":"245","severity":1,"message":"274","line":17,"column":25,"nodeType":"247","messageId":"248","endLine":17,"endColumn":39},{"ruleId":"249","severity":1,"message":"260","line":28,"column":8,"nodeType":"251","endLine":28,"endColumn":10,"suggestions":"275"},"@typescript-eslint/no-unused-vars","'HTag' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["276"],"jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useParams' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'userId'. Either include them or remove the dependency array.",["277"],"'fetchPosts' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'postId', and 'userId'. Either include them or remove the dependency array.",["278"],"'useRef' is defined but never used.","'createRef' is defined but never used.",["279"],"'create' is defined but never used.","'addProject' is defined but never used.","'useState' is defined but never used.","'motion' is defined but never used.","'useScroll' is defined but never used.","'useTime' is defined but never used.","'setCurrentDate' is assigned a value but never used.",["280"],{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"283","fix":"287"},{"desc":"283","fix":"288"},"Update the dependencies array to be: [dispatch]",{"range":"289","text":"290"},"Update the dependencies array to be: [dispatch, userId]",{"range":"291","text":"292"},"Update the dependencies array to be: [dispatch, postId, userId]",{"range":"293","text":"294"},{"range":"295","text":"292"},{"range":"296","text":"292"},[1081,1083],"[dispatch]",[1200,1202],"[dispatch, userId]",[1377,1379],"[dispatch, postId, userId]",[1800,1802],[1081,1083]]