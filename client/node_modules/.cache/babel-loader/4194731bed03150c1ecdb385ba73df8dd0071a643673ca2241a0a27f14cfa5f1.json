{"ast":null,"code":"var _jsxFileName = \"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/components/Habits/Habits.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport format from \"date-fns/format\";\nimport { useTypedSelector } from \"../../../../../store/selectorTypedHook\";\nimport { patchAddDateToHabit } from \"../../services/habitAPI\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchHabits, updateDatesHabit } from \"../../../../../store/habitsSlice\";\nimport cn from 'classnames';\nimport styles from './Habits.module.css';\nimport getDaysInMonth from \"date-fns/getDaysInMonth\";\nimport setDate from \"date-fns/setDate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Habits = () => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(format(new Date(), 'MMMM yyyy'));\n  const dispatch = useDispatch();\n  const userId = useTypedSelector(state => {\n    var _state$user$user;\n    return (_state$user$user = state.user.user) === null || _state$user$user === void 0 ? void 0 : _state$user$user.id;\n  });\n  const habits = useTypedSelector(state => state.habits.habits);\n  useEffect(() => {\n    if (typeof userId !== 'undefined') {\n      dispatch(fetchHabits(userId));\n    }\n  }, []);\n  const setPerformance = async (e, id, habit) => {\n    console.log(id);\n    const date = setDate(new Date(currentDate), id + 2);\n    try {\n      if (habit.id) {\n        const data = await patchAddDateToHabit(habit.id, date);\n        dispatch(updateDatesHabit(data));\n      }\n    } catch (error) {}\n\n    // нужно добавить метод в API patch для обновления дат в привычке\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Habits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: [\"Month: \", currentDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: habits === null || habits === void 0 ? void 0 : habits.map(habit => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          id: habit.id,\n          className: styles.row,\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: habit.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [...Array(getDaysInMonth(new Date()))].map((date, i) => {\n              return /*#__PURE__*/_jsxDEV(\"label\", {\n                className: cn(styles.day, {}),\n                onClick: e => setPerformance(e, i, habit),\n                id: `${i}`,\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 45\n                }, this)\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 29\n          }, this)]\n        }, habit.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Habits, \"Yhvu+LelN1vVsNG+S4d5LCCFItk=\", false, function () {\n  return [useDispatch, useTypedSelector, useTypedSelector];\n});\n_c = Habits;\nexport default Habits;\nvar _c;\n$RefreshReg$(_c, \"Habits\");","map":{"version":3,"names":["useEffect","useState","format","useTypedSelector","patchAddDateToHabit","useDispatch","fetchHabits","updateDatesHabit","cn","styles","getDaysInMonth","setDate","Habits","currentDate","setCurrentDate","Date","dispatch","userId","state","user","id","habits","setPerformance","e","habit","console","log","date","data","error","map","row","name","Array","i","day"],"sources":["/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/components/Habits/Habits.tsx"],"sourcesContent":["import { FC, useEffect, useState } from \"react\";\nimport format from \"date-fns/format\";\nimport { useTypedSelector } from \"../../../../../store/selectorTypedHook\";\nimport { patchAddDateToHabit } from \"../../services/habitAPI\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../../../../store/store\";\nimport { fetchHabits, updateDatesHabit } from \"../../../../../store/habitsSlice\";\nimport cn from 'classnames';\nimport styles from './Habits.module.css';\nimport { IHabit } from \"../../interfaces/Habits.interfaces\";\n\nimport getDaysInMonth from \"date-fns/getDaysInMonth\";\nimport setDate  from \"date-fns/setDate\";\n\nconst Habits:FC = ():JSX.Element => {\n\n    const [currentDate, setCurrentDate] = useState<string>(format(new Date(), 'MMMM yyyy'));\n\n    const dispatch = useDispatch<AppDispatch>();\n\n    const userId = useTypedSelector(state => state.user.user?.id)\n    const habits = useTypedSelector(state => state.habits.habits);\n\n    useEffect(() => {\n        if (typeof userId !== 'undefined') {\n            dispatch(fetchHabits(userId));\n        }\n    }, []);\n\n    const setPerformance = async (e: React.MouseEvent<HTMLLabelElement, MouseEvent> ,id: number, habit: IHabit) => {\n        console.log(id);\n        \n        const date = setDate(new Date(currentDate), id + 2); \n        \n        try {\n            if (habit.id) {\n                const data = await patchAddDateToHabit(habit.id, date);\n                dispatch(updateDatesHabit(data));\n            }\n        } catch (error) {\n            \n        }\n        \n\n        // нужно добавить метод в API patch для обновления дат в привычке\n    }\n\n    return (\n        <>\n            <thead>\n                <tr>\n                    <th>\n                        Habits\n                    </th>\n                    <th>\n                        Month: {currentDate}\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                {habits?.map(habit => {\n                    return (\n                        <tr key={habit.id} id={habit.id} className={styles.row}>\n                            <td>{habit.name}</td>\n                            <td>\n                                {[...Array(getDaysInMonth(new Date()))].map((date, i) => {\n                                    return (\n                                        <label className={cn(styles.day, {})} onClick={(e) => setPerformance(e, i, habit)} id={`${i}`} key={i}>\n                                            <input type='checkbox'/>\n                                        </label>\n                                    )\n                                })}\n                            </td>\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </>\n    );\n};\n\nexport default Habits;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}