{"ast":null,"code":"var _jsxFileName = \"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/components/Habits/Habits.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport format from \"date-fns/format\";\nimport { useTypedSelector } from \"../../../../../store/selectorTypedHook\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchHabits } from \"../../../../../store/habitsSlice\";\nimport styles from './Habit.module.css';\nimport getDaysInMonth from \"date-fns/getDaysInMonth\";\nimport setDate from \"date-fns/setDate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Habits = () => {\n  _s();\n  const dispatch = useDispatch();\n  const userId = useTypedSelector(state => {\n    var _state$user$user;\n    return (_state$user$user = state.user.user) === null || _state$user$user === void 0 ? void 0 : _state$user$user.id;\n  });\n  const habits = useTypedSelector(state => state.habits.habits);\n  useEffect(() => {\n    if (typeof userId !== 'undefined') {\n      dispatch(fetchHabits(userId));\n    }\n  }, []);\n  const setPerformance = (id, habit) => {\n    const date = setDate(new Date(), id + 1);\n    console.log(date.toUTCString());\n    console.log(date.getUTCMilliseconds());\n\n    // нужно добавить метод в API patch для обновления дат в привычке\n    // \n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Habits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: [\"Month: \", format(new Date(), 'MMMM')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: habits === null || habits === void 0 ? void 0 : habits.map(habit => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          id: habit.id,\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: habit.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [...Array(getDaysInMonth(new Date()))].map((date, i) => {\n              return /*#__PURE__*/_jsxDEV(\"input\", {\n                onClick: () => setPerformance(i, habit),\n                id: `${i}`,\n                type: \"checkbox\",\n                className: styles.day\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this)]\n        }, habit.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n// const constructorDate = () => {\n\n//     const daysInMonth = getDaysInMonth(new Date());\n\n//     return (\n\n//     )\n// }\n_s(Habits, \"BnqnP7UHbCJBZCf9KfCng7j8ceE=\", false, function () {\n  return [useDispatch, useTypedSelector, useTypedSelector];\n});\n_c = Habits;\nexport default Habits;\nvar _c;\n$RefreshReg$(_c, \"Habits\");","map":{"version":3,"names":["useEffect","format","useTypedSelector","useDispatch","fetchHabits","styles","getDaysInMonth","setDate","Habits","dispatch","userId","state","user","id","habits","setPerformance","habit","date","Date","console","log","toUTCString","getUTCMilliseconds","map","name","Array","i","day"],"sources":["/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/components/Habits/Habits.tsx"],"sourcesContent":["import { FC, Fragment, useEffect, useState } from \"react\";\nimport format from \"date-fns/format\";\nimport { useTypedSelector } from \"../../../../../store/selectorTypedHook\";\nimport Input from \"../../../../../ui/Input/Input\";\nimport Button from \"../../../../../ui/Button/Button\";\nimport { $authHost } from \"../../../../AuthPage/modules/services/http.user\";\nimport { createHabit } from \"../../services/habitAPI\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../../../../store/store\";\nimport { addHabit, fetchHabits } from \"../../../../../store/habitsSlice\";\n\nimport styles from './Habit.module.css';\nimport { IHabit } from \"../../interfaces/Habits.interfaces\";\n\nimport getDaysInMonth from \"date-fns/getDaysInMonth\";\nimport setDate  from \"date-fns/setDate\";\n\nconst Habits:FC = ():JSX.Element => {\n\n    const dispatch = useDispatch<AppDispatch>();\n\n    const userId = useTypedSelector(state => state.user.user?.id)\n    const habits = useTypedSelector(state => state.habits.habits);\n\n    useEffect(() => {\n        if (typeof userId !== 'undefined') {\n            dispatch(fetchHabits(userId));\n        }\n    }, [])\n\n    const setPerformance = (id: number, habit: IHabit) => {\n\n        const date = setDate(new Date(), id + 1)\n        console.log(date.toUTCString());\n        console.log(date.getUTCMilliseconds());\n        \n        \n        // нужно добавить метод в API patch для обновления дат в привычке\n        // \n    }\n\n    return (\n        <>\n            <thead>\n                <tr>\n                    <th>\n                        Habits\n                    </th>\n                    <th>\n                        Month: {format(new Date(), 'MMMM')}\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                {habits?.map(habit => {\n                    return (\n                        <tr key={habit.id} id={habit.id}>\n                            <td>{habit.name}</td>\n                            <td>\n                                {[...Array(getDaysInMonth(new Date()))].map((date, i) => {\n                                    return (\n                                        <input onClick={() => setPerformance(i, habit)} key={i} id={`${i}`} type='checkbox' className={styles.day}/>\n                                    )\n                                })}\n                            </td>\n                        \n                        </tr>\n                    )\n                })}\n            </tbody>\n        </>\n    );\n};\n\n\n// const constructorDate = () => {\n\n//     const daysInMonth = getDaysInMonth(new Date());\n\n//     return (\n        \n//     )\n// }\n\n\nexport default Habits;"],"mappings":";;AAAA,SAAuBA,SAAS,QAAkB,OAAO;AACzD,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,gBAAgB,QAAQ,wCAAwC;AAKzE,SAASC,WAAW,QAAQ,aAAa;AAEzC,SAAmBC,WAAW,QAAQ,kCAAkC;AAExE,OAAOC,MAAM,MAAM,oBAAoB;AAGvC,OAAOC,cAAc,MAAM,yBAAyB;AACpD,OAAOC,OAAO,MAAO,kBAAkB;AAAC;AAAA;AAExC,MAAMC,MAAS,GAAG,MAAkB;EAAA;EAEhC,MAAMC,QAAQ,GAAGN,WAAW,EAAe;EAE3C,MAAMO,MAAM,GAAGR,gBAAgB,CAACS,KAAK;IAAA;IAAA,2BAAIA,KAAK,CAACC,IAAI,CAACA,IAAI,qDAAf,iBAAiBC,EAAE;EAAA,EAAC;EAC7D,MAAMC,MAAM,GAAGZ,gBAAgB,CAACS,KAAK,IAAIA,KAAK,CAACG,MAAM,CAACA,MAAM,CAAC;EAE7Dd,SAAS,CAAC,MAAM;IACZ,IAAI,OAAOU,MAAM,KAAK,WAAW,EAAE;MAC/BD,QAAQ,CAACL,WAAW,CAACM,MAAM,CAAC,CAAC;IACjC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,cAAc,GAAG,CAACF,EAAU,EAAEG,KAAa,KAAK;IAElD,MAAMC,IAAI,GAAGV,OAAO,CAAC,IAAIW,IAAI,EAAE,EAAEL,EAAE,GAAG,CAAC,CAAC;IACxCM,OAAO,CAACC,GAAG,CAACH,IAAI,CAACI,WAAW,EAAE,CAAC;IAC/BF,OAAO,CAACC,GAAG,CAACH,IAAI,CAACK,kBAAkB,EAAE,CAAC;;IAGtC;IACA;EACJ,CAAC;;EAED,oBACI;IAAA,wBACI;MAAA,uBACI;QAAA,wBACI;UAAA,UAAI;QAEJ;UAAA;UAAA;UAAA;QAAA,QAAK,eACL;UAAA,WAAI,SACO,EAACrB,MAAM,CAAC,IAAIiB,IAAI,EAAE,EAAE,MAAM,CAAC;QAAA;UAAA;UAAA;UAAA;QAAA,QACjC;MAAA;QAAA;QAAA;QAAA;MAAA;IACJ;MAAA;MAAA;MAAA;IAAA,QACD,eACR;MAAA,UACKJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAES,GAAG,CAACP,KAAK,IAAI;QAClB,oBACI;UAAmB,EAAE,EAAEA,KAAK,CAACH,EAAG;UAAA,wBAC5B;YAAA,UAAKG,KAAK,CAACQ;UAAI;YAAA;YAAA;YAAA;UAAA,QAAM,eACrB;YAAA,UACK,CAAC,GAAGC,KAAK,CAACnB,cAAc,CAAC,IAAIY,IAAI,EAAE,CAAC,CAAC,CAAC,CAACK,GAAG,CAAC,CAACN,IAAI,EAAES,CAAC,KAAK;cACrD,oBACI;gBAAO,OAAO,EAAE,MAAMX,cAAc,CAACW,CAAC,EAAEV,KAAK,CAAE;gBAAS,EAAE,EAAG,GAAEU,CAAE,EAAE;gBAAC,IAAI,EAAC,UAAU;gBAAC,SAAS,EAAErB,MAAM,CAACsB;cAAI,GAArDD,CAAC;gBAAA;gBAAA;gBAAA;cAAA,QAAsD;YAEpH,CAAC;UAAC;YAAA;YAAA;YAAA;UAAA,QACD;QAAA,GARAV,KAAK,CAACH,EAAE;UAAA;UAAA;UAAA;QAAA,QAUZ;MAEb,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QACE;EAAA,gBACT;AAEX,CAAC;;AAGD;;AAEA;;AAEA;;AAEA;AACA;AAAA,GAjEML,MAAS;EAAA,QAEML,WAAW,EAEbD,gBAAgB,EAChBA,gBAAgB;AAAA;AAAA,KAL7BM,MAAS;AAoEf,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}