{"ast":null,"code":"var _jsxFileName = \"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/components/Habits/Habits.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport format from \"date-fns/format\";\nimport { useTypedSelector } from \"../../../../../store/selectorTypedHook\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchHabits } from \"../../../../../store/habitsSlice\";\nimport styles from './Habits.module.css';\nimport getDaysInMonth from \"date-fns/getDaysInMonth\";\nimport setDate from \"date-fns/setDate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Habits = () => {\n  _s();\n  // const [currentDate, setCurrentDate] = useState<string>(format(new Date(), 'MMMM yyyy'));\n\n  const dispatch = useDispatch();\n  const userId = useTypedSelector(state => {\n    var _state$user$user;\n    return (_state$user$user = state.user.user) === null || _state$user$user === void 0 ? void 0 : _state$user$user.id;\n  });\n  const habits = useTypedSelector(state => state.habits.habits);\n  useEffect(() => {\n    if (typeof userId !== 'undefined') {\n      dispatch(fetchHabits(userId));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Habits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: [\"Month: \", format(new Date(), 'MMMM yyyy')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: habits === null || habits === void 0 ? void 0 : habits.map(habit => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          id: habit.id,\n          className: styles.row,\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: habit.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [...Array(getDaysInMonth(new Date()))].map((date, i) => {\n              return /*#__PURE__*/_jsxDEV(TableDaysGeneration, {\n                i: i,\n                habit: habit\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this)]\n        }, habit.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Habits, \"BnqnP7UHbCJBZCf9KfCng7j8ceE=\", false, function () {\n  return [useDispatch, useTypedSelector, useTypedSelector];\n});\n_c = Habits;\nconst TableDaysGeneration = _ref => {\n  _s2();\n  let {\n    i,\n    habit\n  } = _ref;\n  const [checked, setChecked] = useState();\n  const setPerformance = (e, id, habit) => {\n    const date = setDate(new Date(), id + 1);\n    console.log(e.target);\n    console.log(date);\n  };\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    className: styles.day,\n    onClick: e => setPerformance(e, i, habit),\n    id: `${i}`,\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)\n  }, i, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n_s2(TableDaysGeneration, \"wZLQPxNdaXTpDwdPNJWxoeAEsUY=\");\n_c2 = TableDaysGeneration;\nexport default Habits;\nvar _c, _c2;\n$RefreshReg$(_c, \"Habits\");\n$RefreshReg$(_c2, \"TableDaysGeneration\");","map":{"version":3,"names":["useEffect","useState","format","useTypedSelector","useDispatch","fetchHabits","styles","getDaysInMonth","setDate","Habits","dispatch","userId","state","user","id","habits","Date","map","habit","row","name","Array","date","i","TableDaysGeneration","checked","setChecked","setPerformance","e","console","log","target","day"],"sources":["/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/components/Habits/Habits.tsx"],"sourcesContent":["import { FC, Fragment, useEffect, useState } from \"react\";\nimport format from \"date-fns/format\";\nimport { useTypedSelector } from \"../../../../../store/selectorTypedHook\";\nimport Input from \"../../../../../ui/Input/Input\";\nimport Button from \"../../../../../ui/Button/Button\";\nimport { $authHost } from \"../../../../AuthPage/modules/services/http.user\";\nimport { createHabit } from \"../../services/habitAPI\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../../../../store/store\";\nimport { addHabit, fetchHabits } from \"../../../../../store/habitsSlice\";\n\nimport styles from './Habits.module.css';\nimport { IHabit } from \"../../interfaces/Habits.interfaces\";\n\nimport getDaysInMonth from \"date-fns/getDaysInMonth\";\nimport setDate  from \"date-fns/setDate\";\n\nconst Habits:FC = ():JSX.Element => {\n\n    // const [currentDate, setCurrentDate] = useState<string>(format(new Date(), 'MMMM yyyy'));\n\n    const dispatch = useDispatch<AppDispatch>();\n\n    const userId = useTypedSelector(state => state.user.user?.id)\n    const habits = useTypedSelector(state => state.habits.habits);\n\n    useEffect(() => {\n        if (typeof userId !== 'undefined') {\n            dispatch(fetchHabits(userId));\n        }\n    }, []);\n\n    return (\n        <>\n            <thead>\n                <tr>\n                    <th>\n                        Habits\n                    </th>\n                    <th>\n                        Month: {format(new Date(), 'MMMM yyyy')}\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                {habits?.map(habit => {\n                    return (\n                        <tr key={habit.id} id={habit.id} className={styles.row}>\n                            <td>{habit.name}</td>\n                            <td>\n                                {[...Array(getDaysInMonth(new Date()))].map((date, i) => {\n                                    return (\n                                        <TableDaysGeneration i={i} habit={habit}/>\n                                    )\n                                })}\n                            </td>\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </>\n    );\n};\n\ninterface IDay {\n    i: number\n    habit: IHabit\n}\n\nconst TableDaysGeneration = ({i, habit}: IDay) => {\n\n    const [checked, setChecked] = useState<boolean>();\n\n    const setPerformance = (e: React.MouseEvent<HTMLLabelElement, MouseEvent> ,id: number, habit: IHabit) => {\n\n        const date = setDate(new Date(), id + 1);\n        console.log(e.target);\n        \n        console.log(date);\n        \n    }\n\n    return (\n        <label className={styles.day} onClick={(e) => setPerformance(e, i, habit)} id={`${i}`} key={i}>\n            <input type='checkbox'/>\n        </label>\n    )\n} \n\nexport default Habits;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}