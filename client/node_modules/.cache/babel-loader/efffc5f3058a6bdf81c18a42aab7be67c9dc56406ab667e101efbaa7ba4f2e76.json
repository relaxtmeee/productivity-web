{"ast":null,"code":"var _jsxFileName = \"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/components/TaskCreate/TaskCreate.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTypedSelector } from '../../../../../store/selectorTypedHook';\nimport { addTask } from '../../../../../store/todosSlice';\nimport Button from '../../../../../ui/Button/Button';\nimport Input from '../../../../../ui/Input/Input';\nimport Textarea from '../../../../../ui/Textarea/Textarea';\nimport { createProjectTask } from '../../services/todosAPI';\nimport styles from './TaskCreate.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskCreate = _ref => {\n  _s();\n  let {\n    setOpen,\n    ...props\n  } = _ref;\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const currentProject = useTypedSelector(state => state.todos.currentProject);\n  const dispatch = useDispatch();\n  const onCreateTask = async () => {\n    try {\n      if (typeof (currentProject === null || currentProject === void 0 ? void 0 : currentProject.id) !== 'undefined') {\n        const data = await createProjectTask({\n          name,\n          description,\n          projectId: currentProject === null || currentProject === void 0 ? void 0 : currentProject.id,\n          status: 'progress'\n        });\n        if (typeof data !== 'undefined' && typeof data !== 'string') {\n          dispatch(addTask({\n            id: data.id,\n            name,\n            description,\n            status: data.status\n          }));\n        }\n      }\n    } catch (error) {}\n    setOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.wrapper,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.create,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        value: name,\n        onChange: e => setName(e.target.value),\n        placeholder: \"Type name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n        value: description,\n        onChange: e => setDescription(e.target.value),\n        placeholder: \"Type description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.buttons,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: onCreateTask,\n          children: \"Create task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"warning\",\n          onClick: () => setOpen(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskCreate, \"mAOi4sAvNN9sY9CTK6CaKhnAfwc=\", false, function () {\n  return [useTypedSelector, useDispatch];\n});\n_c = TaskCreate;\nexport default TaskCreate;\nvar _c;\n$RefreshReg$(_c, \"TaskCreate\");","map":{"version":3,"names":["useState","useDispatch","useTypedSelector","addTask","Button","Input","Textarea","createProjectTask","styles","TaskCreate","setOpen","props","name","setName","description","setDescription","currentProject","state","todos","dispatch","onCreateTask","id","data","projectId","status","error","wrapper","create","e","target","value","buttons"],"sources":["/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/TodosPage/modules/components/TaskCreate/TaskCreate.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTypedSelector } from '../../../../../store/selectorTypedHook';\nimport { AppDispatch } from '../../../../../store/store';\nimport { addProject, addTask } from '../../../../../store/todosSlice';\nimport Button from '../../../../../ui/Button/Button';\nimport Input from '../../../../../ui/Input/Input';\nimport Textarea from '../../../../../ui/Textarea/Textarea';\nimport { ITaskCreate } from '../../interfaces/TaskCreate.interface';\nimport { createProjectTask } from '../../services/todosAPI';\nimport styles from './TaskCreate.module.css';\n\n\nconst TaskCreate = ({setOpen, ...props}: ITaskCreate): JSX.Element => {\n\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n\n    const currentProject = useTypedSelector(state => state.todos.currentProject);\n    \n    const dispatch = useDispatch<AppDispatch>();\n\n    const onCreateTask = async () => {\n    \n        try {\n            if (typeof currentProject?.id !== 'undefined') {\n                const data = await createProjectTask({name, description, projectId: currentProject?.id , status: 'progress'});                \n\n                if(typeof data !== 'undefined' && typeof data !== 'string') {\n                    dispatch(addTask({id: data.id, name, description, status: data.status }));\n                }\n            }\n\n\n        } catch (error) {\n            \n        }\n        setOpen(false);\n    }\n\n    return (\n        <div className={styles.wrapper}>\n            <div className={styles.create}>\n                <Input value={name} onChange={(e) => setName(e.target.value)} placeholder='Type name'/> \n                <Textarea value={description} onChange={(e) => setDescription(e.target.value)} placeholder='Type description'/>  \n                <div className={styles.buttons}>\n                    <Button onClick={onCreateTask}>Create task</Button>\n                    <Button type='warning' onClick={() => setOpen(false)}>Cancel</Button>\n                </div> \n            </div>\n        </div>\n       \n    );\n};\n\nexport default TaskCreate;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,gBAAgB,QAAQ,wCAAwC;AAEzE,SAAqBC,OAAO,QAAQ,iCAAiC;AACrE,OAAOC,MAAM,MAAM,iCAAiC;AACpD,OAAOC,KAAK,MAAM,+BAA+B;AACjD,OAAOC,QAAQ,MAAM,qCAAqC;AAE1D,SAASC,iBAAiB,QAAQ,yBAAyB;AAC3D,OAAOC,MAAM,MAAM,yBAAyB;AAAC;AAG7C,MAAMC,UAAU,GAAG,QAAmD;EAAA;EAAA,IAAlD;IAACC,OAAO;IAAE,GAAGC;EAAkB,CAAC;EAEhD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMgB,cAAc,GAAGd,gBAAgB,CAACe,KAAK,IAAIA,KAAK,CAACC,KAAK,CAACF,cAAc,CAAC;EAE5E,MAAMG,QAAQ,GAAGlB,WAAW,EAAe;EAE3C,MAAMmB,YAAY,GAAG,YAAY;IAE7B,IAAI;MACA,IAAI,QAAOJ,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEK,EAAE,MAAK,WAAW,EAAE;QAC3C,MAAMC,IAAI,GAAG,MAAMf,iBAAiB,CAAC;UAACK,IAAI;UAAEE,WAAW;UAAES,SAAS,EAAEP,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEK,EAAE;UAAGG,MAAM,EAAE;QAAU,CAAC,CAAC;QAE7G,IAAG,OAAOF,IAAI,KAAK,WAAW,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;UACxDH,QAAQ,CAAChB,OAAO,CAAC;YAACkB,EAAE,EAAEC,IAAI,CAACD,EAAE;YAAET,IAAI;YAAEE,WAAW;YAAEU,MAAM,EAAEF,IAAI,CAACE;UAAO,CAAC,CAAC,CAAC;QAC7E;MACJ;IAGJ,CAAC,CAAC,OAAOC,KAAK,EAAE,CAEhB;IACAf,OAAO,CAAC,KAAK,CAAC;EAClB,CAAC;EAED,oBACI;IAAK,SAAS,EAAEF,MAAM,CAACkB,OAAQ;IAAA,uBAC3B;MAAK,SAAS,EAAElB,MAAM,CAACmB,MAAO;MAAA,wBAC1B,QAAC,KAAK;QAAC,KAAK,EAAEf,IAAK;QAAC,QAAQ,EAAGgB,CAAC,IAAKf,OAAO,CAACe,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;QAAC,WAAW,EAAC;MAAW;QAAA;QAAA;QAAA;MAAA,QAAE,eACvF,QAAC,QAAQ;QAAC,KAAK,EAAEhB,WAAY;QAAC,QAAQ,EAAGc,CAAC,IAAKb,cAAc,CAACa,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;QAAC,WAAW,EAAC;MAAkB;QAAA;QAAA;QAAA;MAAA,QAAE,eAC/G;QAAK,SAAS,EAAEtB,MAAM,CAACuB,OAAQ;QAAA,wBAC3B,QAAC,MAAM;UAAC,OAAO,EAAEX,YAAa;UAAA,UAAC;QAAW;UAAA;UAAA;UAAA;QAAA,QAAS,eACnD,QAAC,MAAM;UAAC,IAAI,EAAC,SAAS;UAAC,OAAO,EAAE,MAAMV,OAAO,CAAC,KAAK,CAAE;UAAA,UAAC;QAAM;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA;QAAA;QAAA;QAAA;MAAA,QACnE;IAAA;MAAA;MAAA;MAAA;IAAA;EACJ;IAAA;IAAA;IAAA;EAAA,QACJ;AAGd,CAAC;AAAC,GAxCID,UAAU;EAAA,QAKWP,gBAAgB,EAEtBD,WAAW;AAAA;AAAA,KAP1BQ,UAAU;AA0ChB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}