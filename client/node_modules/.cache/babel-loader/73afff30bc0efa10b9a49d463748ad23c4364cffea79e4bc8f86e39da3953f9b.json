{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { getOnePost } from \"../pages/PostPage/modules/services/postAPI\";\nimport { getPost } from \"../pages/PostsPage/modules/services/http.posts\";\nconst initialState = {\n  posts: [],\n  post: undefined,\n  postsLoadingStatus: 'idle'\n};\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async (userId, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  const response = await getPost(userId);\n  if (typeof response !== 'string') {\n    return response;\n  } else {\n    return rejectWithValue(response);\n  }\n});\nexport const fetchPost = createAsyncThunk('posts/fetchPost', async postId => {\n  return await getOnePost(postId);\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    addPost: (state, action) => {\n      state.posts = action.payload;\n    },\n    setPostNull: state => {\n      state.posts = [];\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchPosts.pending, state => {\n      state.postsLoadingStatus = 'pending';\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.posts = action.payload;\n      state.postsLoadingStatus = 'idle';\n    }).addCase(fetchPosts.rejected, state => {\n      state.postsLoadingStatus = 'failed';\n    }).addCase(fetchPost.pending, state => {\n      state.postsLoadingStatus = 'pending';\n    }).addCase(fetchPost.fulfilled, (state, action) => {\n      state.post = action.payload;\n      state.postsLoadingStatus = 'idle';\n    }).addCase(fetchPost.rejected, state => {\n      state.postsLoadingStatus = 'failed';\n    }).addDefaultCase(() => {});\n  }\n});\nconst {\n  actions,\n  reducer\n} = postsSlice;\nexport const {\n  addPost,\n  setPostNull\n} = actions;\nexport default reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getOnePost","getPost","initialState","posts","post","undefined","postsLoadingStatus","fetchPosts","userId","rejectWithValue","response","fetchPost","postId","postsSlice","name","reducers","addPost","state","action","payload","setPostNull","extraReducers","builder","addCase","pending","fulfilled","rejected","addDefaultCase","actions","reducer"],"sources":["/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/postsSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { getOnePost } from \"../pages/PostPage/modules/services/postAPI\";\nimport { IPost } from \"../pages/PostsPage/modules/interfaces/Posts.interface\";\nimport { getPost } from \"../pages/PostsPage/modules/services/http.posts\";\n\n\nexport interface IPosts {\n    posts: IPost[] | undefined\n    post: IPost | undefined\n    postsLoadingStatus: 'idle' | 'pending' | 'succeeded' | 'failed'\n}\n\nconst initialState = {\n    posts: [],\n    post: undefined,\n    postsLoadingStatus: 'idle'\n} as IPosts\n\nexport const fetchPosts = createAsyncThunk(\n    'posts/fetchPosts',\n    async (userId: string, {rejectWithValue}) => {\n        const response = await getPost(userId);\n        if (typeof response !== 'string') {\n          return response;\n        } else {\n          return rejectWithValue(response);\n        }\n    }\n)\n\nexport const fetchPost = createAsyncThunk(\n    'posts/fetchPost',\n    async (postId: string) => {\n        return await getOnePost(postId);\n    }\n)\n\nconst postsSlice = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {\n        addPost: (state, action) => {state.posts = action.payload},\n        setPostNull: (state) => {state.posts = []}\n    },\n    extraReducers: (builder) => {\n        builder \n            .addCase(fetchPosts.pending, state => {state.postsLoadingStatus =  'pending'})\n            .addCase(fetchPosts.fulfilled, (state, action) => {\n                state.posts =  action.payload;\n                state.postsLoadingStatus = 'idle';     \n            })\n            .addCase(fetchPosts.rejected, state => {state.postsLoadingStatus = 'failed'})\n\n            .addCase(fetchPost.pending, state => {state.postsLoadingStatus =  'pending'})\n            .addCase(fetchPost.fulfilled, (state, action) => {\n                state.post=  action.payload;\n                state.postsLoadingStatus = 'idle';     \n            })\n            .addCase(fetchPost.rejected, state => {state.postsLoadingStatus = 'failed'})\n            .addDefaultCase(() => {})\n    }\n});\n\n\nconst {actions, reducer} = postsSlice;\n\nexport const {addPost, setPostNull} = actions;\n\nexport default reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,UAAU,QAAQ,4CAA4C;AAEvE,SAASC,OAAO,QAAQ,gDAAgD;AASxE,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,IAAI,EAAEC,SAAS;EACfC,kBAAkB,EAAE;AACxB,CAAW;AAEX,OAAO,MAAMC,UAAU,GAAGR,gBAAgB,CACtC,kBAAkB,EAClB,OAAOS,MAAc,WAAwB;EAAA,IAAtB;IAACC;EAAe,CAAC;EACpC,MAAMC,QAAQ,GAAG,MAAMT,OAAO,CAACO,MAAM,CAAC;EACtC,IAAI,OAAOE,QAAQ,KAAK,QAAQ,EAAE;IAChC,OAAOA,QAAQ;EACjB,CAAC,MAAM;IACL,OAAOD,eAAe,CAACC,QAAQ,CAAC;EAClC;AACJ,CAAC,CACJ;AAED,OAAO,MAAMC,SAAS,GAAGZ,gBAAgB,CACrC,iBAAiB,EACjB,MAAOa,MAAc,IAAK;EACtB,OAAO,MAAMZ,UAAU,CAACY,MAAM,CAAC;AACnC,CAAC,CACJ;AAED,MAAMC,UAAU,GAAGf,WAAW,CAAC;EAC3BgB,IAAI,EAAE,OAAO;EACbZ,YAAY;EACZa,QAAQ,EAAE;IACNC,OAAO,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAACD,KAAK,CAACd,KAAK,GAAGe,MAAM,CAACC,OAAO;IAAA,CAAC;IAC1DC,WAAW,EAAGH,KAAK,IAAK;MAACA,KAAK,CAACd,KAAK,GAAG,EAAE;IAAA;EAC7C,CAAC;EACDkB,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACFC,OAAO,CAAChB,UAAU,CAACiB,OAAO,EAAEP,KAAK,IAAI;MAACA,KAAK,CAACX,kBAAkB,GAAI,SAAS;IAAA,CAAC,CAAC,CAC7EiB,OAAO,CAAChB,UAAU,CAACkB,SAAS,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MAC9CD,KAAK,CAACd,KAAK,GAAIe,MAAM,CAACC,OAAO;MAC7BF,KAAK,CAACX,kBAAkB,GAAG,MAAM;IACrC,CAAC,CAAC,CACDiB,OAAO,CAAChB,UAAU,CAACmB,QAAQ,EAAET,KAAK,IAAI;MAACA,KAAK,CAACX,kBAAkB,GAAG,QAAQ;IAAA,CAAC,CAAC,CAE5EiB,OAAO,CAACZ,SAAS,CAACa,OAAO,EAAEP,KAAK,IAAI;MAACA,KAAK,CAACX,kBAAkB,GAAI,SAAS;IAAA,CAAC,CAAC,CAC5EiB,OAAO,CAACZ,SAAS,CAACc,SAAS,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MAC7CD,KAAK,CAACb,IAAI,GAAGc,MAAM,CAACC,OAAO;MAC3BF,KAAK,CAACX,kBAAkB,GAAG,MAAM;IACrC,CAAC,CAAC,CACDiB,OAAO,CAACZ,SAAS,CAACe,QAAQ,EAAET,KAAK,IAAI;MAACA,KAAK,CAACX,kBAAkB,GAAG,QAAQ;IAAA,CAAC,CAAC,CAC3EqB,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;EACjC;AACJ,CAAC,CAAC;AAGF,MAAM;EAACC,OAAO;EAAEC;AAAO,CAAC,GAAGhB,UAAU;AAErC,OAAO,MAAM;EAACG,OAAO;EAAEI;AAAW,CAAC,GAAGQ,OAAO;AAE7C,eAAeC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}