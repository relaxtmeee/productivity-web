{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { getHabits } from \"../pages/HabitsPage/modules/services/habitAPI\";\nconst initialState = {\n  habits: [],\n  habitsLoadingStatus: 'idle',\n  habitDateStatus: 'idle'\n};\nexport const fetchHabits = createAsyncThunk('posts/fetchHabits', async (userId, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  const response = await getHabits(userId);\n  if (typeof response !== 'string') {\n    return response;\n  } else {\n    return rejectWithValue(response);\n  }\n});\nconst habitsSlice = createSlice({\n  name: 'habits',\n  initialState,\n  reducers: {\n    addHabit: (state, action) => {\n      var _state$habits;\n      (_state$habits = state.habits) === null || _state$habits === void 0 ? void 0 : _state$habits.push(action.payload);\n    },\n    updatingDatesHabit: state => {\n      state.habitDateStatus = 'pending';\n    },\n    updateDatesHabit: (state, action) => {\n      var _state$habits2;\n      (_state$habits2 = state.habits) === null || _state$habits2 === void 0 ? void 0 : _state$habits2.map(habit => habit.id === action.payload.id ? action.payload : habit);\n      state.habitDateStatus = 'idle';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchHabits.pending, state => {\n      state.habitsLoadingStatus = 'pending';\n    }).addCase(fetchHabits.fulfilled, (state, action) => {\n      state.habits = action.payload;\n      state.habitsLoadingStatus = 'idle';\n    }).addCase(fetchHabits.rejected, state => {\n      state.habitsLoadingStatus = 'failed';\n    }).addDefaultCase(() => {});\n  }\n});\nconst {\n  actions,\n  reducer\n} = habitsSlice;\nexport const {\n  addHabit,\n  updateDatesHabit\n} = actions;\nexport default reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getHabits","initialState","habits","habitsLoadingStatus","habitDateStatus","fetchHabits","userId","rejectWithValue","response","habitsSlice","name","reducers","addHabit","state","action","push","payload","updatingDatesHabit","updateDatesHabit","map","habit","id","extraReducers","builder","addCase","pending","fulfilled","rejected","addDefaultCase","actions","reducer"],"sources":["/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/habitsSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { IHabit } from \"../pages/HabitsPage/modules/interfaces/Habits.interfaces\";\nimport { getHabits } from \"../pages/HabitsPage/modules/services/habitAPI\";\n\nexport interface IHabits {\n    habits: IHabit[] | undefined\n    habitsLoadingStatus: 'idle' | 'pending' | 'succeeded' | 'failed',\n    habitDateStatus: 'idle' | 'pending' | 'succeeded' | 'failed'\n}\n\nconst initialState = {\n    habits: [],\n    habitsLoadingStatus: 'idle',\n    habitDateStatus: 'idle'\n} as IHabits\n\nexport const fetchHabits = createAsyncThunk(\n    'posts/fetchHabits',\n    async (userId: string, {rejectWithValue}) => {\n        const response = await getHabits(userId);\n        if (typeof response !== 'string') {\n          return response;\n        } else {\n          return rejectWithValue(response);\n        }\n    }\n)\n\nconst habitsSlice = createSlice({\n    name: 'habits',\n    initialState,\n    reducers: {\n        addHabit: (state, action) => {state.habits?.push(action.payload)},\n        updatingDatesHabit: (state) => {state.habitDateStatus = 'pending'},\n        updateDatesHabit: (state, action) => {\n            state.habits?.map(habit => habit.id === action.payload.id ? action.payload : habit);\n            state.habitDateStatus = 'idle'\n        }\n    },\n    extraReducers: (builder) => {\n        builder \n            .addCase(fetchHabits.pending, state => {state.habitsLoadingStatus =  'pending'})\n            .addCase(fetchHabits.fulfilled, (state, action) => {\n                state.habits =  action.payload;\n                state.habitsLoadingStatus = 'idle';     \n            })\n            .addCase(fetchHabits.rejected, state => {state.habitsLoadingStatus = 'failed'})\n\n            .addDefaultCase(() => {})\n    }\n});\n\n\nconst {actions, reducer} = habitsSlice;\n\nexport const { addHabit, updateDatesHabit } = actions;\n\nexport default reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,SAASC,SAAS,QAAQ,+CAA+C;AAQzE,MAAMC,YAAY,GAAG;EACjBC,MAAM,EAAE,EAAE;EACVC,mBAAmB,EAAE,MAAM;EAC3BC,eAAe,EAAE;AACrB,CAAY;AAEZ,OAAO,MAAMC,WAAW,GAAGN,gBAAgB,CACvC,mBAAmB,EACnB,OAAOO,MAAc,WAAwB;EAAA,IAAtB;IAACC;EAAe,CAAC;EACpC,MAAMC,QAAQ,GAAG,MAAMR,SAAS,CAACM,MAAM,CAAC;EACxC,IAAI,OAAOE,QAAQ,KAAK,QAAQ,EAAE;IAChC,OAAOA,QAAQ;EACjB,CAAC,MAAM;IACL,OAAOD,eAAe,CAACC,QAAQ,CAAC;EAClC;AACJ,CAAC,CACJ;AAED,MAAMC,WAAW,GAAGX,WAAW,CAAC;EAC5BY,IAAI,EAAE,QAAQ;EACdT,YAAY;EACZU,QAAQ,EAAE;IACNC,QAAQ,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAAA;MAAC,iBAAAD,KAAK,CAACX,MAAM,kDAAZ,cAAca,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IAAA,CAAC;IACjEC,kBAAkB,EAAGJ,KAAK,IAAK;MAACA,KAAK,CAACT,eAAe,GAAG,SAAS;IAAA,CAAC;IAClEc,gBAAgB,EAAE,CAACL,KAAK,EAAEC,MAAM,KAAK;MAAA;MACjC,kBAAAD,KAAK,CAACX,MAAM,mDAAZ,eAAciB,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,EAAE,KAAKP,MAAM,CAACE,OAAO,CAACK,EAAE,GAAGP,MAAM,CAACE,OAAO,GAAGI,KAAK,CAAC;MACnFP,KAAK,CAACT,eAAe,GAAG,MAAM;IAClC;EACJ,CAAC;EACDkB,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACFC,OAAO,CAACnB,WAAW,CAACoB,OAAO,EAAEZ,KAAK,IAAI;MAACA,KAAK,CAACV,mBAAmB,GAAI,SAAS;IAAA,CAAC,CAAC,CAC/EqB,OAAO,CAACnB,WAAW,CAACqB,SAAS,EAAE,CAACb,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACX,MAAM,GAAIY,MAAM,CAACE,OAAO;MAC9BH,KAAK,CAACV,mBAAmB,GAAG,MAAM;IACtC,CAAC,CAAC,CACDqB,OAAO,CAACnB,WAAW,CAACsB,QAAQ,EAAEd,KAAK,IAAI;MAACA,KAAK,CAACV,mBAAmB,GAAG,QAAQ;IAAA,CAAC,CAAC,CAE9EyB,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;EACjC;AACJ,CAAC,CAAC;AAGF,MAAM;EAACC,OAAO;EAAEC;AAAO,CAAC,GAAGrB,WAAW;AAEtC,OAAO,MAAM;EAAEG,QAAQ;EAAEM;AAAiB,CAAC,GAAGW,OAAO;AAErD,eAAeC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}