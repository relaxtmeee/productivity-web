{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { getCategories, getCategoryProjects, getProjectTasks } from \"../pages/TodosPage/modules/services/todosAPI\";\nconst initialState = {\n  categories: [],\n  todosLoadingStatus: 'idle',\n  currentCategory: '',\n  curentCategoryProjects: [],\n  curentCategoryLoadingStatus: 'idle',\n  currentProject: undefined,\n  currentProjectTasks: [],\n  currentProjectTasksLoading: 'idle'\n};\nexport const fetchCategories = createAsyncThunk('posts/fetchCategories', async (userId, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  const response = await getCategories(userId);\n  if (typeof response !== 'string') {\n    return response;\n  } else {\n    return rejectWithValue(response);\n  }\n});\nexport const fetchCategoryProjects = createAsyncThunk('posts/fetchCategoryProjects', async (categoryId, _ref2) => {\n  let {\n    rejectWithValue\n  } = _ref2;\n  const response = await getCategoryProjects(categoryId);\n  if (typeof response !== 'string') {\n    return response;\n  } else {\n    return rejectWithValue(response);\n  }\n});\nexport const fetchProjectTasks = createAsyncThunk('posts/fetchProjectTasks', async (projectId, _ref3) => {\n  let {\n    rejectWithValue\n  } = _ref3;\n  const response = await getProjectTasks(projectId);\n  if (typeof response !== 'string') {\n    return response;\n  } else {\n    return rejectWithValue(response);\n  }\n});\nconst postsSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    addCategory: (state, action) => {\n      var _state$categories;\n      (_state$categories = state.categories) === null || _state$categories === void 0 ? void 0 : _state$categories.push(action.payload);\n    },\n    setCurrentCategory: (state, action) => {\n      state.currentCategory = action.payload;\n    },\n    deleteCategory: (state, action) => {\n      var _state$categories2;\n      state.categories = (_state$categories2 = state.categories) === null || _state$categories2 === void 0 ? void 0 : _state$categories2.filter(category => category.id !== action.payload);\n      state.currentCategory = '';\n      state.curentCategoryProjects = [];\n      state.currentProjectTasks = [];\n    },\n    addProject: (state, action) => {\n      var _state$curentCategory;\n      (_state$curentCategory = state.curentCategoryProjects) === null || _state$curentCategory === void 0 ? void 0 : _state$curentCategory.push(action.payload);\n    },\n    deleteProject: (state, action) => {\n      var _state$curentCategory2;\n      state.curentCategoryProjects = (_state$curentCategory2 = state.curentCategoryProjects) === null || _state$curentCategory2 === void 0 ? void 0 : _state$curentCategory2.filter(project => project.id !== action.payload);\n    },\n    setCurrentProject: (state, action) => {\n      state.currentProject = action.payload;\n      state.currentProjectTasks = [];\n      state.currentProject = undefined;\n    },\n    addTask: (state, action) => {\n      var _state$currentProject;\n      (_state$currentProject = state.currentProjectTasks) === null || _state$currentProject === void 0 ? void 0 : _state$currentProject.push(action.payload);\n    },\n    deleteTask: (state, action) => {\n      var _state$currentProject2;\n      state.currentProjectTasks = (_state$currentProject2 = state.currentProjectTasks) === null || _state$currentProject2 === void 0 ? void 0 : _state$currentProject2.filter(task => task.id !== action.payload);\n    },\n    setTasksNull: state => {\n      state.currentProjectTasks = [];\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchCategories.pending, state => {\n      state.todosLoadingStatus = 'pending';\n    }).addCase(fetchCategories.fulfilled, (state, action) => {\n      state.categories = action.payload;\n      state.todosLoadingStatus = 'idle';\n    }).addCase(fetchCategories.rejected, state => {\n      state.todosLoadingStatus = 'failed';\n    }).addCase(fetchCategoryProjects.pending, state => {\n      state.curentCategoryLoadingStatus = 'pending';\n    }).addCase(fetchCategoryProjects.fulfilled, (state, action) => {\n      state.curentCategoryProjects = action.payload;\n      state.curentCategoryLoadingStatus = 'idle';\n    }).addCase(fetchCategoryProjects.rejected, state => {\n      state.curentCategoryLoadingStatus = 'failed';\n    }).addCase(fetchProjectTasks.pending, state => {\n      state.curentCategoryLoadingStatus = 'pending';\n    }).addCase(fetchProjectTasks.fulfilled, (state, action) => {\n      state.currentProjectTasks = action.payload;\n      state.curentCategoryLoadingStatus = 'idle';\n    }).addCase(fetchProjectTasks.rejected, state => {\n      state.curentCategoryLoadingStatus = 'failed';\n    }).addDefaultCase(() => {});\n  }\n});\nconst {\n  actions,\n  reducer\n} = postsSlice;\nexport const {\n  addCategory,\n  setCurrentCategory,\n  deleteCategory,\n  addProject,\n  deleteProject,\n  setCurrentProject,\n  addTask,\n  deleteTask,\n  setTasksNull\n} = actions;\nexport default reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getCategories","getCategoryProjects","getProjectTasks","initialState","categories","todosLoadingStatus","currentCategory","curentCategoryProjects","curentCategoryLoadingStatus","currentProject","undefined","currentProjectTasks","currentProjectTasksLoading","fetchCategories","userId","rejectWithValue","response","fetchCategoryProjects","categoryId","fetchProjectTasks","projectId","postsSlice","name","reducers","addCategory","state","action","push","payload","setCurrentCategory","deleteCategory","filter","category","id","addProject","deleteProject","project","setCurrentProject","addTask","deleteTask","task","setTasksNull","extraReducers","builder","addCase","pending","fulfilled","rejected","addDefaultCase","actions","reducer"],"sources":["/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/todosSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { ICategory } from \"../pages/TodosPage/modules/interfaces/Category.interface\";\nimport { IProject } from \"../pages/TodosPage/modules/interfaces/Project.interface\";\nimport { ITask } from \"../pages/TodosPage/modules/interfaces/Task.interface\";\nimport { getCategories, getCategoryProjects, getProjectTasks } from \"../pages/TodosPage/modules/services/todosAPI\";\n\n\nexport interface ITodos {\n    categories: ICategory[] | undefined\n    currentCategory: string \n    todosLoadingStatus: 'idle' | 'pending' | 'succeeded' | 'failed'\n    curentCategoryProjects: IProject[] | undefined\n    curentCategoryLoadingStatus: 'idle' | 'pending' | 'succeeded' | 'failed'\n    currentProject: IProject | undefined\n    currentProjectTasks: ITask[] | undefined\n    currentProjectTasksLoading: 'idle' | 'pending' | 'succeeded' | 'failed'\n}\n\nconst initialState = {\n    categories: [],\n    todosLoadingStatus: 'idle',\n    currentCategory: '',\n    curentCategoryProjects: [],\n    curentCategoryLoadingStatus: 'idle',\n    currentProject: undefined,\n    currentProjectTasks: [],\n    currentProjectTasksLoading: 'idle'\n} as ITodos\n\nexport const fetchCategories = createAsyncThunk(\n    'posts/fetchCategories',\n    async (userId: string, {rejectWithValue}) => {\n        const response = await getCategories(userId);\n        if (typeof response !== 'string') {\n          return response;\n        } else {\n          return rejectWithValue(response);\n        }\n    }\n)\n\nexport const fetchCategoryProjects = createAsyncThunk(\n    'posts/fetchCategoryProjects',\n    async (categoryId: string , {rejectWithValue}) => {\n        const response = await getCategoryProjects(categoryId);\n        if (typeof response !== 'string') {\n          return response;\n        } else {\n          return rejectWithValue(response);\n        }\n    }\n)\n\nexport const fetchProjectTasks = createAsyncThunk(\n    'posts/fetchProjectTasks',\n    async (projectId: string , {rejectWithValue}) => {\n        const response = await getProjectTasks(projectId);\n        if (typeof response !== 'string') {\n          return response;\n        } else {\n          return rejectWithValue(response);\n        }\n    }\n)\n\nconst postsSlice = createSlice({\n    name: 'todos',\n    initialState,\n    reducers: {\n        addCategory: (state, action) => {state.categories?.push(action.payload)},\n        setCurrentCategory: (state, action) => {state.currentCategory = action.payload},\n        deleteCategory: (state, action) => {\n            state.categories = state.categories?.filter(category => category.id !== action.payload);\n            state.currentCategory = '';\n            state.curentCategoryProjects = [];\n            state.currentProjectTasks = [];\n        },\n        addProject: (state, action) => {state.curentCategoryProjects?.push(action.payload)},\n        deleteProject: (state, action) => {state.curentCategoryProjects = state.curentCategoryProjects?.filter(project => project.id !== action.payload)},\n        setCurrentProject: (state, action) => {\n            state.currentProject = action.payload;\n            state.currentProjectTasks = [];\n            state.currentProject = undefined;\n        },\n        addTask: (state, action) => {state.currentProjectTasks?.push(action.payload)},\n        deleteTask: (state, action) => {state.currentProjectTasks = state.currentProjectTasks?.filter(task => task.id !== action.payload)},\n        setTasksNull: (state) => {state.currentProjectTasks = []}\n    },\n    extraReducers: (builder) => {\n        builder \n            .addCase(fetchCategories.pending, state => {state.todosLoadingStatus =  'pending'})\n            .addCase(fetchCategories.fulfilled, (state, action) => {\n                state.categories = action.payload;\n                state.todosLoadingStatus = 'idle';     \n            })\n            .addCase(fetchCategories.rejected, state => {state.todosLoadingStatus = 'failed'})\n\n            .addCase(fetchCategoryProjects.pending, state => {state.curentCategoryLoadingStatus =  'pending'})\n            .addCase(fetchCategoryProjects.fulfilled, (state, action) => {\n                state.curentCategoryProjects =  action.payload;\n                state.curentCategoryLoadingStatus = 'idle';     \n            })\n            .addCase(fetchCategoryProjects.rejected, state => {state.curentCategoryLoadingStatus = 'failed'})\n\n            .addCase(fetchProjectTasks.pending, state => {state.curentCategoryLoadingStatus =  'pending'})\n            .addCase(fetchProjectTasks.fulfilled, (state, action) => {\n                state.currentProjectTasks =  action.payload;\n                state.curentCategoryLoadingStatus = 'idle';     \n            })\n            .addCase(fetchProjectTasks.rejected, state => {state.curentCategoryLoadingStatus = 'failed'})\n\n            .addDefaultCase(() => {})\n    }\n});\n\n\nconst { actions, reducer } = postsSlice;\n\nexport const { \n    addCategory, \n    setCurrentCategory, \n    deleteCategory,\n    addProject, \n    deleteProject,\n    setCurrentProject, \n    addTask,\n    deleteTask,\n    setTasksNull } = actions;\n\nexport default reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}