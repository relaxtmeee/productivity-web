{"ast":null,"code":"var _jsxFileName = \"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/modules/components/Posts/Posts.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useTypedSelector } from \"../../../../../store/selectorTypedHook\";\nimport { fetchPosts } from \"../../../../../store/postsSlice\";\nimport HTag from \"../../../../../ui/Htag/HTag\";\nimport PTag from \"../../../../../ui/PTag/PTag\";\nimport styles from \"./Posts.module.css\";\nimport Spinner from \"../../../../../ui/Spinner/Spinner\";\nimport PostCreate from \"../PostCreate/PostCreate\";\nimport Button from \"../../../../../ui/Button/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Posts = () => {\n  _s();\n  const [open, setOpen] = useState(false);\n  const posts = useTypedSelector(state => state.posts.posts);\n  const postLoading = useTypedSelector(state => state.posts.postsLoadingStatus);\n  const userId = useTypedSelector(state => {\n    var _state$user$user;\n    return (_state$user$user = state.user.user) === null || _state$user$user === void 0 ? void 0 : _state$user$user.id;\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (typeof userId != \"undefined\") {\n      dispatch(fetchPosts(userId));\n    }\n  }, []);\n  if (postLoading !== 'idle') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  } else {}\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.posts,\n    children: [open ? /*#__PURE__*/_jsxDEV(PostCreate, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n      children: \"Add article\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), posts && posts.map(post => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.post,\n        children: [/*#__PURE__*/_jsxDEV(HTag, {\n          className: styles.heading,\n          htag: \"h2\",\n          children: post.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PTag, {\n          className: styles.description,\n          size: \"16\",\n          children: post.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PTag, {\n          className: styles.date,\n          size: \"14\",\n          children: new Date(post.date).toLocaleDateString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(Posts, \"K9fsCYXbD+yVmqsBfYdzBb0aw8s=\", false, function () {\n  return [useTypedSelector, useTypedSelector, useTypedSelector, useDispatch];\n});\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["useEffect","useState","useDispatch","useTypedSelector","fetchPosts","HTag","PTag","styles","Spinner","PostCreate","Button","Posts","open","setOpen","posts","state","postLoading","postsLoadingStatus","userId","user","id","dispatch","map","post","heading","name","description","date","Date","toLocaleDateString"],"sources":["/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/PostsPage/modules/components/Posts/Posts.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useTypedSelector } from \"../../../../../store/selectorTypedHook\";\nimport { fetchPosts } from \"../../../../../store/postsSlice\";\nimport { AppDispatch } from \"../../../../../store/store\";\nimport HTag from \"../../../../../ui/Htag/HTag\";\nimport PTag from \"../../../../../ui/PTag/PTag\";\nimport styles from \"./Posts.module.css\";\nimport Spinner from \"../../../../../ui/Spinner/Spinner\";\nimport PostCreate from \"../PostCreate/PostCreate\";\nimport Button from \"../../../../../ui/Button/Button\";\n\nconst Posts: React.FC = ():JSX.Element => {\n\n    const [open, setOpen] = useState(false);\n    const posts = useTypedSelector(state => state.posts.posts)\n    const postLoading = useTypedSelector(state => state.posts.postsLoadingStatus);\n    const userId = useTypedSelector(state => state.user.user?.id);\n    const dispatch = useDispatch<AppDispatch>();\n\n    useEffect(() => {\n        if(typeof userId != \"undefined\" ) {\n            dispatch(fetchPosts(userId));\n        }\n    }, [])\n    \n\n    if(postLoading !== 'idle') {\n        return <>\n            <Spinner/>\n        </>\n    } else {\n\n    }\n    \n    \n    return (\n        <div className={styles.posts}>\n            {open ? <PostCreate /> : null}\n            <Button>Add article</Button>\n            {posts && posts.map((post) => {\n                return (\n                <div key={post.id} className={styles.post}>\n                    <HTag className={styles.heading} htag=\"h2\">{post.name}</HTag>\n                    <PTag className={styles.description} size=\"16\">{post.description}</PTag>\n                    <PTag className={styles.date} size=\"14\">{new Date(post.date).toLocaleDateString()}</PTag>\n                </div>\n                )\n            })}\n        </div>\n    );\n};\n\nexport default Posts;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,gBAAgB,QAAQ,wCAAwC;AACzE,SAASC,UAAU,QAAQ,iCAAiC;AAE5D,OAAOC,IAAI,MAAM,6BAA6B;AAC9C,OAAOC,IAAI,MAAM,6BAA6B;AAC9C,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,OAAO,MAAM,mCAAmC;AACvD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,MAAM,MAAM,iCAAiC;AAAC;AAAA;AAErD,MAAMC,KAAe,GAAG,MAAkB;EAAA;EAEtC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAMa,KAAK,GAAGX,gBAAgB,CAACY,KAAK,IAAIA,KAAK,CAACD,KAAK,CAACA,KAAK,CAAC;EAC1D,MAAME,WAAW,GAAGb,gBAAgB,CAACY,KAAK,IAAIA,KAAK,CAACD,KAAK,CAACG,kBAAkB,CAAC;EAC7E,MAAMC,MAAM,GAAGf,gBAAgB,CAACY,KAAK;IAAA;IAAA,2BAAIA,KAAK,CAACI,IAAI,CAACA,IAAI,qDAAf,iBAAiBC,EAAE;EAAA,EAAC;EAC7D,MAAMC,QAAQ,GAAGnB,WAAW,EAAe;EAE3CF,SAAS,CAAC,MAAM;IACZ,IAAG,OAAOkB,MAAM,IAAI,WAAW,EAAG;MAC9BG,QAAQ,CAACjB,UAAU,CAACc,MAAM,CAAC,CAAC;IAChC;EACJ,CAAC,EAAE,EAAE,CAAC;EAGN,IAAGF,WAAW,KAAK,MAAM,EAAE;IACvB,oBAAO;MAAA,uBACH,QAAC,OAAO;QAAA;QAAA;QAAA;MAAA;IAAE,iBACX;EACP,CAAC,MAAM,CAEP;EAGA,oBACI;IAAK,SAAS,EAAET,MAAM,CAACO,KAAM;IAAA,WACxBF,IAAI,gBAAG,QAAC,UAAU;MAAA;MAAA;MAAA;IAAA,QAAG,GAAG,IAAI,eAC7B,QAAC,MAAM;MAAA,UAAC;IAAW;MAAA;MAAA;MAAA;IAAA,QAAS,EAC3BE,KAAK,IAAIA,KAAK,CAACQ,GAAG,CAAEC,IAAI,IAAK;MAC1B,oBACA;QAAmB,SAAS,EAAEhB,MAAM,CAACgB,IAAK;QAAA,wBACtC,QAAC,IAAI;UAAC,SAAS,EAAEhB,MAAM,CAACiB,OAAQ;UAAC,IAAI,EAAC,IAAI;UAAA,UAAED,IAAI,CAACE;QAAI;UAAA;UAAA;UAAA;QAAA,QAAQ,eAC7D,QAAC,IAAI;UAAC,SAAS,EAAElB,MAAM,CAACmB,WAAY;UAAC,IAAI,EAAC,IAAI;UAAA,UAAEH,IAAI,CAACG;QAAW;UAAA;UAAA;UAAA;QAAA,QAAQ,eACxE,QAAC,IAAI;UAAC,SAAS,EAAEnB,MAAM,CAACoB,IAAK;UAAC,IAAI,EAAC,IAAI;UAAA,UAAE,IAAIC,IAAI,CAACL,IAAI,CAACI,IAAI,CAAC,CAACE,kBAAkB;QAAE;UAAA;UAAA;UAAA;QAAA,QAAQ;MAAA,GAHnFN,IAAI,CAACH,EAAE;QAAA;QAAA;QAAA;MAAA,QAIX;IAEV,CAAC,CAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QACA;AAEd,CAAC;AAAC,GAvCIT,KAAe;EAAA,QAGHR,gBAAgB,EACVA,gBAAgB,EACrBA,gBAAgB,EACdD,WAAW;AAAA;AAAA,KAN1BS,KAAe;AAyCrB,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}