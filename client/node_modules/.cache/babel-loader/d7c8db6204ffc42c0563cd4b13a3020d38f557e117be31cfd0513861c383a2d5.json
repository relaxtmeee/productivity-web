{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { getPost } from \"../pages/MainPage/modules/services/http.posts\";\nconst initialState = {\n  posts: [],\n  postsLoadingStatus: 'idle'\n};\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async data => {\n  const {\n    userId\n  } = data;\n  return await getPost(userId);\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {// fetchPosts: (state, action)  => {state.posts = action.payload},\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchPosts.pending, state => {\n      state.postsLoadingStatus = 'pending';\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.posts = action.payload;\n      state.postsLoadingStatus = 'idle';\n    }).addCase(fetchPosts.rejected, state => {\n      state.postsLoadingStatus = 'failed';\n    }).addDefaultCase(() => {});\n  }\n});\nconst {\n  actions,\n  reducer\n} = postsSlice;\nexport default reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getPost","initialState","posts","postsLoadingStatus","fetchPosts","data","userId","postsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","addDefaultCase","actions","reducer"],"sources":["/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/postsSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { IPost } from \"../pages/MainPage/modules/interfaces/Posts.interface\";\nimport { getPost } from \"../pages/MainPage/modules/services/http.posts\";\n\n\nexport interface IPosts {\n    posts: IPost[] | undefined\n    postsLoadingStatus: 'idle' | 'pending' | 'succeeded' | 'failed'\n}\n\nconst initialState = {\n    posts: [],\n    postsLoadingStatus: 'idle'\n} as IPosts\n\nexport const fetchPosts = createAsyncThunk(\n    'posts/fetchPosts',\n    async (data) => {\n        const { userId } =  data;\n        return await getPost(userId);\n    }\n)\n\nconst postsSlice = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {// fetchPosts: (state, action)  => {state.posts = action.payload},\n},\n    extraReducers: (builder) => {\n        builder \n            .addCase(fetchPosts.pending, state => {state.postsLoadingStatus =  'pending'})\n            .addCase(fetchPosts.fulfilled, (state, action) => {\n                state.posts =  action.payload;\n                state.postsLoadingStatus = 'idle';     \n            })\n            .addCase(fetchPosts.rejected, state => {state.postsLoadingStatus = 'failed'})\n            .addDefaultCase(() => {})\n    }\n})\n\nconst {actions, reducer} = postsSlice;\n\nexport default reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,SAASC,OAAO,QAAQ,+CAA+C;AAQvE,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,EAAE;EACTC,kBAAkB,EAAE;AACxB,CAAW;AAEX,OAAO,MAAMC,UAAU,GAAGL,gBAAgB,CACtC,kBAAkB,EAClB,MAAOM,IAAI,IAAK;EACZ,MAAM;IAAEC;EAAO,CAAC,GAAID,IAAI;EACxB,OAAO,MAAML,OAAO,CAACM,MAAM,CAAC;AAChC,CAAC,CACJ;AAED,MAAMC,UAAU,GAAGT,WAAW,CAAC;EAC3BU,IAAI,EAAE,OAAO;EACbP,YAAY;EACZQ,QAAQ,EAAE,CAAC;EAAA,CACd;EACGC,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACFC,OAAO,CAACR,UAAU,CAACS,OAAO,EAAEC,KAAK,IAAI;MAACA,KAAK,CAACX,kBAAkB,GAAI,SAAS;IAAA,CAAC,CAAC,CAC7ES,OAAO,CAACR,UAAU,CAACW,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC9CF,KAAK,CAACZ,KAAK,GAAIc,MAAM,CAACC,OAAO;MAC7BH,KAAK,CAACX,kBAAkB,GAAG,MAAM;IACrC,CAAC,CAAC,CACDS,OAAO,CAACR,UAAU,CAACc,QAAQ,EAAEJ,KAAK,IAAI;MAACA,KAAK,CAACX,kBAAkB,GAAG,QAAQ;IAAA,CAAC,CAAC,CAC5EgB,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;EACjC;AACJ,CAAC,CAAC;AAEF,MAAM;EAACC,OAAO;EAAEC;AAAO,CAAC,GAAGd,UAAU;AAErC,eAAec,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}