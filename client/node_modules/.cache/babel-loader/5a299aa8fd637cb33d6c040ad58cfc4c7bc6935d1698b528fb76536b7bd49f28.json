{"ast":null,"code":"var _jsxFileName = \"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/components/Habits/Habits.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport format from \"date-fns/format\";\nimport { useTypedSelector } from \"../../../../../store/selectorTypedHook\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchHabits } from \"../../../../../store/habitsSlice\";\nimport getDaysInMonth from \"date-fns/getDaysInMonth\";\nimport styles from './Habit.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Habits = () => {\n  _s();\n  const dispatch = useDispatch();\n  const userId = useTypedSelector(state => {\n    var _state$user$user;\n    return (_state$user$user = state.user.user) === null || _state$user$user === void 0 ? void 0 : _state$user$user.id;\n  });\n  const habits = useTypedSelector(state => state.habits.habits);\n  useEffect(() => {\n    if (typeof userId !== 'undefined') {\n      dispatch(fetchHabits(userId));\n    }\n  }, []);\n  const setPerformance = id => {\n    console.log(id);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Habits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: [\"Month: \", format(new Date(), 'MMMM')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: habits === null || habits === void 0 ? void 0 : habits.map(habit => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          id: habit.id,\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: habit.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [...Array(getDaysInMonth(new Date()))].map((date, i) => {\n              return /*#__PURE__*/_jsxDEV(\"input\", {\n                id: `${i}`,\n                type: \"checkbox\",\n                className: styles.day\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 29\n          }, this)]\n        }, habit.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n// const constructorDate = () => {\n\n//     const daysInMonth = getDaysInMonth(new Date());\n\n//     return (\n\n//     )\n// }\n_s(Habits, \"BnqnP7UHbCJBZCf9KfCng7j8ceE=\", false, function () {\n  return [useDispatch, useTypedSelector, useTypedSelector];\n});\n_c = Habits;\nexport default Habits;\nvar _c;\n$RefreshReg$(_c, \"Habits\");","map":{"version":3,"names":["useEffect","format","useTypedSelector","useDispatch","fetchHabits","getDaysInMonth","styles","Habits","dispatch","userId","state","user","id","habits","setPerformance","console","log","Date","map","habit","name","Array","date","i","day"],"sources":["/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/components/Habits/Habits.tsx"],"sourcesContent":["import { FC, Fragment, useEffect, useState } from \"react\";\nimport format from \"date-fns/format\";\nimport { useTypedSelector } from \"../../../../../store/selectorTypedHook\";\nimport Input from \"../../../../../ui/Input/Input\";\nimport Button from \"../../../../../ui/Button/Button\";\nimport { $authHost } from \"../../../../AuthPage/modules/services/http.user\";\nimport { createHabit } from \"../../services/habitAPI\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../../../../store/store\";\nimport { addHabit, fetchHabits } from \"../../../../../store/habitsSlice\";\nimport getDaysInMonth from \"date-fns/getDaysInMonth\";\nimport styles from './Habit.module.css';\n\n\nconst Habits:FC = ():JSX.Element => {\n\n    const dispatch = useDispatch<AppDispatch>();\n\n    const userId = useTypedSelector(state => state.user.user?.id)\n    const habits = useTypedSelector(state => state.habits.habits);\n\n    useEffect(() => {\n        if (typeof userId !== 'undefined') {\n            dispatch(fetchHabits(userId));\n        }\n    }, [])\n\n    const setPerformance = (id: string) => {\n        console.log(id);\n    }\n\n    return (\n        <>\n            <thead>\n                <tr>\n                    <th>\n                        Habits\n                    </th>\n                    <th>\n                        Month: {format(new Date(), 'MMMM')}\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                {habits?.map(habit => {\n                    return (\n                        <tr key={habit.id} id={habit.id}>\n                            <td>{habit.name}</td>\n                            <td>\n                                {[...Array(getDaysInMonth(new Date()))].map((date, i) => {\n                                    return (\n                                        <input key={i} id={`${i}`} type='checkbox' className={styles.day}/>\n                                    )\n                                })}\n\n                            </td>\n                        \n                        </tr>\n                    )\n                })}\n            </tbody>\n        </>\n    );\n};\n\n\n// const constructorDate = () => {\n\n//     const daysInMonth = getDaysInMonth(new Date());\n\n//     return (\n        \n//     )\n// }\n\n\nexport default Habits;"],"mappings":";;AAAA,SAAuBA,SAAS,QAAkB,OAAO;AACzD,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,gBAAgB,QAAQ,wCAAwC;AAKzE,SAASC,WAAW,QAAQ,aAAa;AAEzC,SAAmBC,WAAW,QAAQ,kCAAkC;AACxE,OAAOC,cAAc,MAAM,yBAAyB;AACpD,OAAOC,MAAM,MAAM,oBAAoB;AAAC;AAAA;AAGxC,MAAMC,MAAS,GAAG,MAAkB;EAAA;EAEhC,MAAMC,QAAQ,GAAGL,WAAW,EAAe;EAE3C,MAAMM,MAAM,GAAGP,gBAAgB,CAACQ,KAAK;IAAA;IAAA,2BAAIA,KAAK,CAACC,IAAI,CAACA,IAAI,qDAAf,iBAAiBC,EAAE;EAAA,EAAC;EAC7D,MAAMC,MAAM,GAAGX,gBAAgB,CAACQ,KAAK,IAAIA,KAAK,CAACG,MAAM,CAACA,MAAM,CAAC;EAE7Db,SAAS,CAAC,MAAM;IACZ,IAAI,OAAOS,MAAM,KAAK,WAAW,EAAE;MAC/BD,QAAQ,CAACJ,WAAW,CAACK,MAAM,CAAC,CAAC;IACjC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,cAAc,GAAIF,EAAU,IAAK;IACnCG,OAAO,CAACC,GAAG,CAACJ,EAAE,CAAC;EACnB,CAAC;EAED,oBACI;IAAA,wBACI;MAAA,uBACI;QAAA,wBACI;UAAA,UAAI;QAEJ;UAAA;UAAA;UAAA;QAAA,QAAK,eACL;UAAA,WAAI,SACO,EAACX,MAAM,CAAC,IAAIgB,IAAI,EAAE,EAAE,MAAM,CAAC;QAAA;UAAA;UAAA;UAAA;QAAA,QACjC;MAAA;QAAA;QAAA;QAAA;MAAA;IACJ;MAAA;MAAA;MAAA;IAAA,QACD,eACR;MAAA,UACKJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEK,GAAG,CAACC,KAAK,IAAI;QAClB,oBACI;UAAmB,EAAE,EAAEA,KAAK,CAACP,EAAG;UAAA,wBAC5B;YAAA,UAAKO,KAAK,CAACC;UAAI;YAAA;YAAA;YAAA;UAAA,QAAM,eACrB;YAAA,UACK,CAAC,GAAGC,KAAK,CAAChB,cAAc,CAAC,IAAIY,IAAI,EAAE,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAACI,IAAI,EAAEC,CAAC,KAAK;cACrD,oBACI;gBAAe,EAAE,EAAG,GAAEA,CAAE,EAAE;gBAAC,IAAI,EAAC,UAAU;gBAAC,SAAS,EAAEjB,MAAM,CAACkB;cAAI,GAArDD,CAAC;gBAAA;gBAAA;gBAAA;cAAA,QAAsD;YAE3E,CAAC;UAAC;YAAA;YAAA;YAAA;UAAA,QAED;QAAA,GATAJ,KAAK,CAACP,EAAE;UAAA;UAAA;UAAA;QAAA,QAWZ;MAEb,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QACE;EAAA,gBACT;AAEX,CAAC;;AAGD;;AAEA;;AAEA;;AAEA;AACA;AAAA,GA3DML,MAAS;EAAA,QAEMJ,WAAW,EAEbD,gBAAgB,EAChBA,gBAAgB;AAAA;AAAA,KAL7BK,MAAS;AA8Df,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}