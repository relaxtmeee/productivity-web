{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { getPost } from \"./pages/MainPage/modules/services/http.posts\";\nconst initialState = {\n  posts: [],\n  postsLoadingStatus: 'idle'\n};\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  return await getPost();\n});\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {// fetchPosts: (state, action)  => {state.posts = action.payload},\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchPosts.pending, state => {\n      state.postsLoadingStatus = 'loading';\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.posts = action.payload;\n      state.postsLoadingStatus = 'idle';\n    }).addCase(fetchPosts.rejected, state => {\n      state.postsLoadingStatus = 'error';\n    }).addDefaultCase(() => {});\n  }\n});\nconst {\n  actions,\n  reducer\n} = postsSlice;\nexport default reducer;\n\n// export const {} = actions;","map":{"version":3,"names":["createSlice","createAsyncThunk","getPost","initialState","posts","postsLoadingStatus","fetchPosts","postsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","addDefaultCase","actions","reducer"],"sources":["/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/postsSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { IPost } from \"./pages/MainPage/modules/interfaces/Posts.interface\";\nimport { getPost } from \"./pages/MainPage/modules/services/http.posts\";\n\n\ninterface IPosts {\n    posts: IPost[] | undefined,\n    postsLoadingStatus: string\n}\n\nconst initialState: IPosts = {\n    posts: [],\n    postsLoadingStatus: 'idle'\n}\n\nexport const fetchPosts = createAsyncThunk(\n    'posts/fetchPosts',\n    async () => {\n        return await getPost();\n    }\n)\n\nconst postsSlice = createSlice({\n    name: 'posts',\n    initialState,\n    reducers: {// fetchPosts: (state, action)  => {state.posts = action.payload},\n    },\n    extraReducers: (builder) => {\n        builder \n            .addCase(fetchPosts.pending, state => {state.postsLoadingStatus =  'loading'})\n            .addCase(fetchPosts.fulfilled, (state, action) => {\n                state.posts =  action.payload;\n                state.postsLoadingStatus = 'idle';     \n            })\n            .addCase(fetchPosts.rejected, state => {state.postsLoadingStatus = 'error'})\n            .addDefaultCase(() => {})\n    }\n})\n\nconst {actions, reducer} = postsSlice;\n\nexport default reducer;\n\n// export const {} = actions;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,SAASC,OAAO,QAAQ,8CAA8C;AAQtE,MAAMC,YAAoB,GAAG;EACzBC,KAAK,EAAE,EAAE;EACTC,kBAAkB,EAAE;AACxB,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGL,gBAAgB,CACtC,kBAAkB,EAClB,YAAY;EACR,OAAO,MAAMC,OAAO,EAAE;AAC1B,CAAC,CACJ;AAED,MAAMK,UAAU,GAAGP,WAAW,CAAC;EAC3BQ,IAAI,EAAE,OAAO;EACbL,YAAY;EACZM,QAAQ,EAAE,CAAC;EAAA,CACV;EACDC,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACFC,OAAO,CAACN,UAAU,CAACO,OAAO,EAAEC,KAAK,IAAI;MAACA,KAAK,CAACT,kBAAkB,GAAI,SAAS;IAAA,CAAC,CAAC,CAC7EO,OAAO,CAACN,UAAU,CAACS,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC9CF,KAAK,CAACV,KAAK,GAAIY,MAAM,CAACC,OAAO;MAC7BH,KAAK,CAACT,kBAAkB,GAAG,MAAM;IACrC,CAAC,CAAC,CACDO,OAAO,CAACN,UAAU,CAACY,QAAQ,EAAEJ,KAAK,IAAI;MAACA,KAAK,CAACT,kBAAkB,GAAG,OAAO;IAAA,CAAC,CAAC,CAC3Ec,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;EACjC;AACJ,CAAC,CAAC;AAEF,MAAM;EAACC,OAAO;EAAEC;AAAO,CAAC,GAAGd,UAAU;AAErC,eAAec,OAAO;;AAEtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}