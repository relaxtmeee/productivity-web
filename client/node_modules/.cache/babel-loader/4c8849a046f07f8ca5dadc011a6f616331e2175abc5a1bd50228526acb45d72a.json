{"ast":null,"code":"var _jsxFileName = \"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/components/Habits/Habits.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport format from \"date-fns/format\";\nimport { useTypedSelector } from \"../../../../../store/selectorTypedHook\";\nimport { patchAddDateToHabit } from \"../../services/habitAPI\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchHabits, updateDatesHabit } from \"../../../../../store/habitsSlice\";\nimport cn from 'classnames';\nimport styles from './Habits.module.css';\nimport getDaysInMonth from \"date-fns/getDaysInMonth\";\nimport setDate from \"date-fns/setDate\";\nimport Spinner from \"../../../../../ui/Spinner/Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Habits = () => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const dispatch = useDispatch();\n  const userId = useTypedSelector(state => {\n    var _state$user$user;\n    return (_state$user$user = state.user.user) === null || _state$user$user === void 0 ? void 0 : _state$user$user.id;\n  });\n  const habits = useTypedSelector(state => state.habits.habits);\n  const loading = useTypedSelector(state => state.habits.habitDateStatus);\n  useEffect(() => {\n    if (typeof userId !== 'undefined') {\n      dispatch(fetchHabits(userId));\n    }\n  }, [dispatch]);\n  const setPerformance = async (e, id, habit) => {\n    const date = setDate(new Date(currentDate), id + 1).toDateString();\n    try {\n      if (habit.id) {\n        const data = await patchAddDateToHabit(habit.id, date);\n        console.log(data);\n        dispatch(updateDatesHabit(data));\n      }\n    } catch (error) {}\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Habits\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: [\"Month: \", format(currentDate, 'MMMM yyyy')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: habits === null || habits === void 0 ? void 0 : habits.map(habit => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          id: habit.id,\n          className: styles.row,\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: habit.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [...Array(getDaysInMonth(new Date()))].map((date, i) => {\n              return (\n                /*#__PURE__*/\n                // <label \n                //     className={cn(styles.day, {\n                //         [styles.active]: habit.dates?.includes(setDate(new Date(currentDate), i + 1).toLocaleDateString())\n                //     })} \n                //     onClick={(e) => setPerformance(e, i, habit)} \n                //     id={`${i}`} \n                //     key={i}\n                // >\n                //     <input type='checkbox'/>\n                // </label>\n                _jsxDEV(DateCur, {\n                  habit: habit,\n                  currentDate: currentDate,\n                  i: i,\n                  setPerformance: e => setPerformance(e, i, habit)\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 41\n                }, this)\n              );\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 29\n          }, this)]\n        }, habit.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Habits, \"y6lDkW70zdFwv9NpinHd66bjIvc=\", false, function () {\n  return [useDispatch, useTypedSelector, useTypedSelector, useTypedSelector];\n});\n_c = Habits;\nconst DateCur = _ref => {\n  _s2();\n  var _habit$dates;\n  let {\n    habit,\n    currentDate,\n    i,\n    setPerformance\n  } = _ref;\n  const loading = useTypedSelector(state => state.habits.habitDateStatus);\n  if (loading === 'pending') {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    className: cn(styles.day, {\n      [styles.active]: (_habit$dates = habit.dates) === null || _habit$dates === void 0 ? void 0 : _habit$dates.includes(setDate(new Date(currentDate), i + 1).toLocaleDateString())\n    }),\n    onClick: e => setPerformance(e, i, habit),\n    id: `${i}`,\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n_s2(DateCur, \"stiLAklmMntg/3J+T4JzBBEe/+E=\", false, function () {\n  return [useTypedSelector];\n});\n_c2 = DateCur;\nexport default Habits;\nvar _c, _c2;\n$RefreshReg$(_c, \"Habits\");\n$RefreshReg$(_c2, \"DateCur\");","map":{"version":3,"names":["useEffect","useState","format","useTypedSelector","patchAddDateToHabit","useDispatch","fetchHabits","updateDatesHabit","cn","styles","getDaysInMonth","setDate","Spinner","Habits","currentDate","setCurrentDate","Date","dispatch","userId","state","user","id","habits","loading","habitDateStatus","setPerformance","e","habit","date","toDateString","data","console","log","error","map","row","name","Array","i","DateCur","day","active","dates","includes","toLocaleDateString"],"sources":["/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/components/Habits/Habits.tsx"],"sourcesContent":["import { FC, useEffect, useState } from \"react\";\nimport format from \"date-fns/format\";\nimport { useTypedSelector } from \"../../../../../store/selectorTypedHook\";\nimport { patchAddDateToHabit } from \"../../services/habitAPI\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../../../../store/store\";\nimport { fetchHabits, updateDatesHabit, updatingDatesHabit } from \"../../../../../store/habitsSlice\";\nimport cn from 'classnames';\nimport styles from './Habits.module.css';\nimport { IHabit } from \"../../interfaces/Habits.interfaces\";\n\nimport getDaysInMonth from \"date-fns/getDaysInMonth\";\nimport setDate  from \"date-fns/setDate\";\nimport Spinner from \"../../../../../ui/Spinner/Spinner\";\n\nconst Habits:FC = ():JSX.Element => {\n\n    const [currentDate, setCurrentDate] = useState<Date>(new Date());\n\n    const dispatch = useDispatch<AppDispatch>();\n\n    const userId = useTypedSelector(state => state.user.user?.id)\n    const habits = useTypedSelector(state => state.habits.habits);\n    const loading = useTypedSelector(state => state.habits.habitDateStatus);\n\n    useEffect(() => {\n        if (typeof userId !== 'undefined') {\n            dispatch(fetchHabits(userId));\n        }\n    }, [dispatch]);\n\n    const setPerformance = async (e: React.MouseEvent<HTMLLabelElement, MouseEvent> ,id: number, habit: IHabit) => {\n        \n        const date = setDate(new Date(currentDate), id + 1).toDateString(); \n        \n        try {\n            if (habit.id) {\n                const data = await patchAddDateToHabit(habit.id, date);\n                console.log(data);\n                \n                dispatch(updateDatesHabit(data));\n            }\n        } catch (error) {\n            \n        }\n    \n    }\n    \n    return (\n        <>\n            <thead>\n                <tr>\n                    <th>\n                        Habits\n                    </th>\n                    <th>\n                        Month: {format(currentDate, 'MMMM yyyy')}\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                {habits?.map(habit => {\n                    return (\n                        <tr key={habit.id} id={habit.id} className={styles.row}>\n                            <td>{habit.name}</td>\n                            <td>\n                                {[...Array(getDaysInMonth(new Date()))].map((date, i) => {                                    \n                                    return (\n                                        // <label \n                                        //     className={cn(styles.day, {\n                                        //         [styles.active]: habit.dates?.includes(setDate(new Date(currentDate), i + 1).toLocaleDateString())\n                                        //     })} \n                                        //     onClick={(e) => setPerformance(e, i, habit)} \n                                        //     id={`${i}`} \n                                        //     key={i}\n                                        // >\n                                        //     <input type='checkbox'/>\n                                        // </label>\n                                        <DateCur key={i} habit={habit} currentDate={currentDate} i={i} setPerformance={(e: React.MouseEvent<HTMLLabelElement, MouseEvent>) => setPerformance(e, i, habit)}/>\n                                    )\n                                })}\n                            </td>\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </>\n    );\n};\n\ninterface IOr {\n    habit: IHabit, currentDate: Date, i: number, setPerformance: (e: React.MouseEvent<HTMLLabelElement, MouseEvent> ,id: number, habit: IHabit) => void\n}\n\nconst DateCur = ({habit, currentDate, i, setPerformance} : IOr) => {\n\n    const loading = useTypedSelector(state => state.habits.habitDateStatus);\n\n    if (loading === 'pending') {\n        return <Spinner/>\n    }\n    \n    return (\n        <label \n            className={cn(styles.day, {\n                [styles.active]: habit.dates?.includes(setDate(new Date(currentDate), i + 1).toLocaleDateString())\n            })} \n            onClick={(e) => setPerformance(e, i, habit)} \n            id={`${i}`} \n        >\n        <input type='checkbox'/>\n    </label>\n    )\n}\n\nexport default Habits;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}