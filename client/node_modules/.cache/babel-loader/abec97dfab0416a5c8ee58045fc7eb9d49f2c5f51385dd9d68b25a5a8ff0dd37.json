{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport posts from '../postsSlice';\nconst stringMiddleware = () => next => action => {\n  if (typeof action === 'string') {\n    return next({\n      type: action\n    });\n  }\n  return next(action);\n};\nconst store = configureStore({\n  reducer: {\n    posts\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(stringMiddleware),\n  devTools: process.env.NODE_ENV !== 'production'\n});\nexport default store;","map":{"version":3,"names":["configureStore","posts","stringMiddleware","next","action","type","store","reducer","middleware","getDefaultMiddleware","concat","devTools","process","env","NODE_ENV"],"sources":["/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/store.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport posts from '../postsSlice';\n\nconst stringMiddleware = () => (next:any) => (action:any) => {\n    if (typeof action === 'string') {\n        return next({\n            type: action\n        })\n    }\n    return next(action)\n}\n\nconst store = configureStore({\n    reducer: { posts },\n    middleware: getDefaultMiddleware => getDefaultMiddleware().concat(stringMiddleware),\n    devTools: process.env.NODE_ENV !== 'production'\n})\n\nexport default store;\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,KAAK,MAAM,eAAe;AAEjC,MAAMC,gBAAgB,GAAG,MAAOC,IAAQ,IAAMC,MAAU,IAAK;EACzD,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC5B,OAAOD,IAAI,CAAC;MACRE,IAAI,EAAED;IACV,CAAC,CAAC;EACN;EACA,OAAOD,IAAI,CAACC,MAAM,CAAC;AACvB,CAAC;AAED,MAAME,KAAK,GAAGN,cAAc,CAAC;EACzBO,OAAO,EAAE;IAAEN;EAAM,CAAC;EAClBO,UAAU,EAAEC,oBAAoB,IAAIA,oBAAoB,EAAE,CAACC,MAAM,CAACR,gBAAgB,CAAC;EACnFS,QAAQ,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK;AACvC,CAAC,CAAC;AAEF,eAAeR,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}