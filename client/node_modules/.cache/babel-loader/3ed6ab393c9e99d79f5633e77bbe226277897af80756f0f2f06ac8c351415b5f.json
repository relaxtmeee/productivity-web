{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { getHabits } from \"../pages/HabitsPage/modules/services/habitAPI\";\nconst initialState = {\n  habits: [],\n  habitsLoadingStatus: 'idle'\n};\nexport const fetchHabits = createAsyncThunk('posts/fetchHabits', async (userId, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n  const response = await getHabits(userId);\n  if (typeof response !== 'string') {\n    return response;\n  } else {\n    return rejectWithValue(response);\n  }\n});\nconst habitsSlice = createSlice({\n  name: 'habits',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchHabits.pending, state => {\n      state.habitsLoadingStatus = 'pending';\n    }).addCase(fetchHabits.fulfilled, (state, action) => {\n      state.habits = action.payload;\n      state.habitsLoadingStatus = 'idle';\n    }).addCase(fetchHabits.rejected, state => {\n      state.habitsLoadingStatus = 'failed';\n    }).addDefaultCase(() => {});\n  }\n});\nconst {\n  actions,\n  reducer\n} = habitsSlice;\nexport const {} = actions;\nexport default reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getHabits","initialState","habits","habitsLoadingStatus","fetchHabits","userId","rejectWithValue","response","habitsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","addDefaultCase","actions","reducer"],"sources":["/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/store/habitsSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { IHabit } from \"../pages/HabitsPage/modules/interfaces/Habits.interfaces\";\nimport { getHabits } from \"../pages/HabitsPage/modules/services/habitAPI\";\n\nexport interface IHabits {\n    habits: IHabit[] | undefined\n    habitsLoadingStatus: 'idle' | 'pending' | 'succeeded' | 'failed'\n}\n\nconst initialState = {\n    habits: [],\n    habitsLoadingStatus: 'idle'\n} as IHabits\n\nexport const fetchHabits = createAsyncThunk(\n    'posts/fetchHabits',\n    async (userId: string, {rejectWithValue}) => {\n        const response = await getHabits(userId);\n        if (typeof response !== 'string') {\n          return response;\n        } else {\n          return rejectWithValue(response);\n        }\n    }\n)\n\nconst habitsSlice = createSlice({\n    name: 'habits',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder \n            .addCase(fetchHabits.pending, state => {state.habitsLoadingStatus =  'pending'})\n            .addCase(fetchHabits.fulfilled, (state, action) => {\n                state.habits =  action.payload;\n                state.habitsLoadingStatus = 'idle';     \n            })\n            .addCase(fetchHabits.rejected, state => {state.habitsLoadingStatus = 'failed'})\n\n            .addDefaultCase(() => {})\n    }\n});\n\n\nconst {actions, reducer} = habitsSlice;\n\nexport const {} = actions;\n\nexport default reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,SAASC,SAAS,QAAQ,+CAA+C;AAOzE,MAAMC,YAAY,GAAG;EACjBC,MAAM,EAAE,EAAE;EACVC,mBAAmB,EAAE;AACzB,CAAY;AAEZ,OAAO,MAAMC,WAAW,GAAGL,gBAAgB,CACvC,mBAAmB,EACnB,OAAOM,MAAc,WAAwB;EAAA,IAAtB;IAACC;EAAe,CAAC;EACpC,MAAMC,QAAQ,GAAG,MAAMP,SAAS,CAACK,MAAM,CAAC;EACxC,IAAI,OAAOE,QAAQ,KAAK,QAAQ,EAAE;IAChC,OAAOA,QAAQ;EACjB,CAAC,MAAM;IACL,OAAOD,eAAe,CAACC,QAAQ,CAAC;EAClC;AACJ,CAAC,CACJ;AAED,MAAMC,WAAW,GAAGV,WAAW,CAAC;EAC5BW,IAAI,EAAE,QAAQ;EACdR,YAAY;EACZS,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACFC,OAAO,CAACT,WAAW,CAACU,OAAO,EAAEC,KAAK,IAAI;MAACA,KAAK,CAACZ,mBAAmB,GAAI,SAAS;IAAA,CAAC,CAAC,CAC/EU,OAAO,CAACT,WAAW,CAACY,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACb,MAAM,GAAIe,MAAM,CAACC,OAAO;MAC9BH,KAAK,CAACZ,mBAAmB,GAAG,MAAM;IACtC,CAAC,CAAC,CACDU,OAAO,CAACT,WAAW,CAACe,QAAQ,EAAEJ,KAAK,IAAI;MAACA,KAAK,CAACZ,mBAAmB,GAAG,QAAQ;IAAA,CAAC,CAAC,CAE9EiB,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC;EACjC;AACJ,CAAC,CAAC;AAGF,MAAM;EAACC,OAAO;EAAEC;AAAO,CAAC,GAAGd,WAAW;AAEtC,OAAO,MAAM,CAAC,CAAC,GAAGa,OAAO;AAEzB,eAAeC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}