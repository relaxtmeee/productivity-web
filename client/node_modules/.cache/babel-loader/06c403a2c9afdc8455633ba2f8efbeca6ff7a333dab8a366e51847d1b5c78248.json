{"ast":null,"code":"var _jsxFileName = \"/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/components/Habits/Habits.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport format from \"date-fns/format\";\nimport { useTypedSelector } from \"../../../../../store/selectorTypedHook\";\nimport Input from \"../../../../../ui/Input/Input\";\nimport Button from \"../../../../../ui/Button/Button\";\nimport { createHabit } from \"../../services/habitAPI\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchHabits } from \"../../../../../store/habitsSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Habits = () => {\n  _s();\n  const [name, setName] = useState('');\n  const [date, setDate] = useState();\n  const dispatch = useDispatch();\n  const userId = useTypedSelector(state => {\n    var _state$user$user;\n    return (_state$user$user = state.user.user) === null || _state$user$user === void 0 ? void 0 : _state$user$user.id;\n  });\n  const habits = useTypedSelector(state => state.habits.habits);\n  useEffect(() => {\n    if (typeof userId !== 'undefined') {\n      dispatch(fetchHabits(userId));\n    }\n  }, []);\n  const addNewHabit = async () => {\n    await createHabit({\n      name: name,\n      dates: [],\n      userId: userId || ''\n    }).then(() => {\n      dispatch(addHabit);\n    });\n  };\n  console.log(habits);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Habits\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Month: \", format(new Date(), 'MMMM')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), habits && habits.map(habit => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: habit.name\n      }, habit.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        onChange: e => setName(e.target.value),\n        value: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"date\",\n        onChange: e => setDate(new Date(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: addNewHabit,\n        children: \"SEND\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Habits, \"4CRbYlyBTVGtQ5WyFe+OwlBFH6E=\", false, function () {\n  return [useDispatch, useTypedSelector, useTypedSelector];\n});\n_c = Habits;\nexport default Habits;\nvar _c;\n$RefreshReg$(_c, \"Habits\");","map":{"version":3,"names":["useEffect","useState","format","useTypedSelector","Input","Button","createHabit","useDispatch","fetchHabits","Habits","name","setName","date","setDate","dispatch","userId","state","user","id","habits","addNewHabit","dates","then","addHabit","console","log","Date","map","habit","e","target","value"],"sources":["/Users/serzhivanov/Desktop/Coding/Projects/myweb/client/src/pages/HabitsPage/modules/components/Habits/Habits.tsx"],"sourcesContent":["import { FC, useEffect, useState } from \"react\";\nimport format from \"date-fns/format\";\nimport { useTypedSelector } from \"../../../../../store/selectorTypedHook\";\nimport Input from \"../../../../../ui/Input/Input\";\nimport Button from \"../../../../../ui/Button/Button\";\nimport { $authHost } from \"../../../../AuthPage/modules/services/http.user\";\nimport { createHabit } from \"../../services/habitAPI\";\nimport { useDispatch } from \"react-redux\";\nimport { AppDispatch } from \"../../../../../store/store\";\nimport { fetchHabits } from \"../../../../../store/habitsSlice\";\n\ninterface IHabit {\n    id: string\n    name: string\n    date: Date[]\n}\n\nconst Habits:FC = ():JSX.Element => {\n\n    const [name, setName] = useState<string>('');\n    const [date, setDate] = useState<Date>();\n\n    const dispatch = useDispatch<AppDispatch>();\n\n    const userId = useTypedSelector(state => state.user.user?.id)\n    const habits = useTypedSelector(state => state.habits.habits);\n\n    useEffect(() => {\n        if (typeof userId !== 'undefined') {\n            dispatch(fetchHabits(userId));\n        }\n    }, [])\n\n    const addNewHabit = async () => {\n        await createHabit({name: name, dates: [], userId: userId || ''})\n            .then(() => {\n                dispatch(addHabit)\n            })\n    }\n\n    console.log(habits);\n    \n\n    return (\n        <>\n            <div>\n                Habits\n            </div>\n            <div>\n                Month: {format(new Date(), 'MMMM')}\n            </div>\n                {habits && habits.map(habit => {\n                    return (\n                        <div key={habit.id}>\n                            {habit.name}\n                        </div>\n                    )\n                })}\n            <div>\n\n            </div>\n            <div>\n                <Input type=\"text\" onChange={(e) => setName(e.target.value)} value={name} />\n                <Input type=\"date\" onChange={(e) => setDate(new Date(e.target.value))}/>\n                <Button onClick={addNewHabit}> \n                    SEND\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default Habits;"],"mappings":";;AAAA,SAAaA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,OAAOC,MAAM,MAAM,iBAAiB;AACpC,SAASC,gBAAgB,QAAQ,wCAAwC;AACzE,OAAOC,KAAK,MAAM,+BAA+B;AACjD,OAAOC,MAAM,MAAM,iCAAiC;AAEpD,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,WAAW,QAAQ,aAAa;AAEzC,SAASC,WAAW,QAAQ,kCAAkC;AAAC;AAAA;AAQ/D,MAAMC,MAAS,GAAG,MAAkB;EAAA;EAEhC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAS,EAAE,CAAC;EAC5C,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,EAAQ;EAExC,MAAMa,QAAQ,GAAGP,WAAW,EAAe;EAE3C,MAAMQ,MAAM,GAAGZ,gBAAgB,CAACa,KAAK;IAAA;IAAA,2BAAIA,KAAK,CAACC,IAAI,CAACA,IAAI,qDAAf,iBAAiBC,EAAE;EAAA,EAAC;EAC7D,MAAMC,MAAM,GAAGhB,gBAAgB,CAACa,KAAK,IAAIA,KAAK,CAACG,MAAM,CAACA,MAAM,CAAC;EAE7DnB,SAAS,CAAC,MAAM;IACZ,IAAI,OAAOe,MAAM,KAAK,WAAW,EAAE;MAC/BD,QAAQ,CAACN,WAAW,CAACO,MAAM,CAAC,CAAC;IACjC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,WAAW,GAAG,YAAY;IAC5B,MAAMd,WAAW,CAAC;MAACI,IAAI,EAAEA,IAAI;MAAEW,KAAK,EAAE,EAAE;MAAEN,MAAM,EAAEA,MAAM,IAAI;IAAE,CAAC,CAAC,CAC3DO,IAAI,CAAC,MAAM;MACRR,QAAQ,CAACS,QAAQ,CAAC;IACtB,CAAC,CAAC;EACV,CAAC;EAEDC,OAAO,CAACC,GAAG,CAACN,MAAM,CAAC;EAGnB,oBACI;IAAA,wBACI;MAAA,UAAK;IAEL;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA,WAAK,SACM,EAACjB,MAAM,CAAC,IAAIwB,IAAI,EAAE,EAAE,MAAM,CAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QAChC,EACDP,MAAM,IAAIA,MAAM,CAACQ,GAAG,CAACC,KAAK,IAAI;MAC3B,oBACI;QAAA,UACKA,KAAK,CAAClB;MAAI,GADLkB,KAAK,CAACV,EAAE;QAAA;QAAA;QAAA;MAAA,QAEZ;IAEd,CAAC,CAAC,eACN;MAAA;MAAA;MAAA;IAAA,QAEM,eACN;MAAA,wBACI,QAAC,KAAK;QAAC,IAAI,EAAC,MAAM;QAAC,QAAQ,EAAGW,CAAC,IAAKlB,OAAO,CAACkB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;QAAC,KAAK,EAAErB;MAAK;QAAA;QAAA;QAAA;MAAA,QAAG,eAC5E,QAAC,KAAK;QAAC,IAAI,EAAC,MAAM;QAAC,QAAQ,EAAGmB,CAAC,IAAKhB,OAAO,CAAC,IAAIa,IAAI,CAACG,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;MAAE;QAAA;QAAA;QAAA;MAAA,QAAE,eACxE,QAAC,MAAM;QAAC,OAAO,EAAEX,WAAY;QAAA,UAAC;MAE9B;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QACP;EAAA,gBACP;AAEX,CAAC;AAAC,GArDIX,MAAS;EAAA,QAKMF,WAAW,EAEbJ,gBAAgB,EAChBA,gBAAgB;AAAA;AAAA,KAR7BM,MAAS;AAuDf,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}